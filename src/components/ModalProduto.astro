---
// src/components/ModalProduto.astro
import '../styles/components/modal-produto.css';
---

<div id="modal-produto" class="modal">
  <div class="modal-overlay"></div>
  <div class="modal-content">
    <div class="modal-drag-handle"></div>

    <button class="modal-close" aria-label="Fechar">
      <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path
          d="M18 6L6 18M6 6L18 18"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"></path>
      </svg>
    </button>

    <div class="modal-body">
      <!-- Galeria Principal -->
      <div class="modal-gallery">
        <div class="main-image-container">
          <img id="main-image" src="" alt="Produto" class="main-image" />
          <button class="expand-btn" aria-label="Expandir imagem">
            <svg
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M15 3H21V9M9 21H3V15M21 3L14 10M3 21L10 14"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </button>
        </div>

        <!-- Thumbnails -->
        <div class="thumbnails-container">
          <div class="thumbnails-track" id="thumbnails-track"></div>
        </div>
      </div>

      <!-- Informações -->
      <div class="modal-info">
        <div class="info-header">
          <div class="modal-badges">
            <span class="modal-condicao"></span>
            <span class="modal-categoria"></span>
          </div>
          <h2 class="modal-nome"></h2>
        </div>

        <div class="info-body">
          <p class="modal-descricao"></p>

          <div class="modal-specs">
            <div class="spec-item">
              <div class="bateria-icon-wrapper">
                <svg
                  class="bateria-icon"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <rect
                    x="2"
                    y="7"
                    width="18"
                    height="10"
                    rx="2"
                    stroke="currentColor"
                    stroke-width="2"></rect>
                  <path
                    d="M20 10H22V14H20"
                    stroke="currentColor"
                    stroke-width="2"></path>
                  <rect
                    class="bateria-fill"
                    x="4"
                    y="9"
                    width="14"
                    height="6"
                    rx="1"
                    fill="currentColor"></rect>
                </svg>
              </div>
              <div>
                <span class="spec-label">Bateria</span>
                <span class="spec-value modal-bateria"></span>
              </div>
            </div>
            <div class="spec-item">
              <svg
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M7 7H17M7 12H17M7 17H13"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              <div>
                <span class="spec-label">Código</span>
                <span class="spec-value modal-codigo"></span>
              </div>
            </div>
          </div>
          <div class="spec-fallback">
            <picture>
              <source srcset="/images/Barbudo.webp" type="image/webp" />
              <img
                src="/images/Barbudo.webp"
                alt="Banner catálogo"
                loading="lazy"
              />
            </picture>
            <span>"Transformando tecnologia em confiança"</span>
          </div>
        </div>

        <div class="info-footer">
          <div class="modal-preco"></div>
          <a
            href="#"
            class="btn-whatsapp"
            target="_blank"
            rel="noopener noreferrer"
          >
            <svg
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M17.472 14.382C17.015 14.153 14.98 13.146 14.571 12.996C14.162 12.846 13.868 12.771 13.573 13.229C13.278 13.687 12.463 14.617 12.206 14.912C11.949 15.207 11.692 15.245 11.235 15.016C10.778 14.787 9.26 14.285 7.463 12.676C6.06 11.418 5.146 9.867 4.889 9.409C4.632 8.951 4.861 8.712 5.09 8.483C5.296 8.277 5.547 7.947 5.776 7.69C6.005 7.433 6.081 7.252 6.231 6.957C6.381 6.662 6.306 6.405 6.192 6.176C6.081 5.947 5.146 3.912 4.775 2.996C4.418 2.108 4.051 2.228 3.78 2.215C3.522 2.202 3.228 2.202 2.933 2.202C2.638 2.202 2.143 2.316 1.734 2.774C1.325 3.232 0.242 4.239 0.242 6.274C0.242 8.309 1.772 10.269 1.997 10.564C2.226 10.859 5.146 15.229 9.588 17.002C10.627 17.458 11.437 17.725 12.064 17.923C13.108 18.254 14.057 18.206 14.813 18.092C15.654 17.964 17.31 17.077 17.681 16.099C18.052 15.121 18.052 14.305 17.938 14.115C17.824 13.925 17.529 13.811 17.072 13.582"
                fill="currentColor"></path>
            </svg>
            Consultar no WhatsApp
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal de Imagem Expandida -->
  <div id="modal-imagem-expandida" class="modal-imagem-expandida">
    <button class="modal-close-expandido" aria-label="Fechar">×</button>
    <img id="imagem-expandida" src="" alt="Imagem expandida" />
    <div class="contador-imagens"></div>
  </div>
</div>

<!-- src/components/ModalProduto.astro - Substituir <script> completo -->

<script>
  import type { Product } from '../types';

  const modal = document.getElementById('modal-produto');
  const modalOverlay = modal?.querySelector('.modal-overlay');
  const modalClose = modal?.querySelector('.modal-close');
  const mainImage = document.getElementById('main-image') as HTMLImageElement;
  const thumbnailsTrack = document.getElementById('thumbnails-track');
  const expandBtn = modal?.querySelector('.expand-btn');

  const modalImagemExpandida = document.getElementById(
    'modal-imagem-expandida',
  ) as HTMLElement | null;
  const imagemExpandida = document.getElementById(
    'imagem-expandida',
  ) as HTMLImageElement | null;
  const btnCloseExpandido = modalImagemExpandida?.querySelector(
    '.modal-close-expandido',
  ) as HTMLButtonElement | null;
  const contadorImagens =
    modalImagemExpandida?.querySelector('.contador-imagens');

  let currentIndex = 0;
  let imagensAtuais: string[] = [];
  let produtoAtual: Product | null = null;
  let isModalOpen = false;

  // CRITICAL: Debounce para evitar múltiplas chamadas
  function debounce(func: Function, wait: number) {
    let timeout: number;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait) as unknown as number;
    };
  }

  // CRITICAL: Cache de imagens + detecção mobile
  const imageCache = new Map<string, HTMLImageElement>();
  const loadingImages = new Set<string>();
  const isMobile = window.innerWidth <= 768;
  const isSlowConnection = navigator.connection && navigator.connection.effectiveType === 'slow-2g' || navigator.connection?.effectiveType === '2g';

  // CRITICAL: Preload otimizado para mobile
  function preloadImage(src: string, priority = false): Promise<HTMLImageElement> {
    return new Promise((resolve, reject) => {
      // Otimizar URL para mobile
      const optimizedSrc = optimizeImageForDevice(src);
      
      if (imageCache.has(optimizedSrc)) {
        resolve(imageCache.get(optimizedSrc)!);
        return;
      }

      if (loadingImages.has(optimizedSrc)) {
        // Se já estamos carregando essa imagem, esperar
        const checkLoaded = () => {
          if (imageCache.has(optimizedSrc)) {
            resolve(imageCache.get(optimizedSrc)!);
          } else {
            setTimeout(checkLoaded, 10);
          }
        };
        checkLoaded();
        return;
      }

      loadingImages.add(optimizedSrc);
      const img = new Image();
      
      // Configurar loading priority para mobile
      if (priority || isMobile) {
        img.fetchPriority = 'high';
        img.loading = 'eager';
      }
      
      img.onload = () => {
        loadingImages.delete(optimizedSrc);
        imageCache.set(optimizedSrc, img);
        imageCache.set(src, img); // Cache também a URL original
        resolve(img);
      };
      
      img.onerror = () => {
        loadingImages.delete(optimizedSrc);
        // Tentar URL original se a otimizada falhou
        if (optimizedSrc !== src) {
          preloadImage(src, priority).then(resolve).catch(reject);
        } else {
          reject(new Error(`Failed to load image: ${src}`));
        }
      };
      
      // Definir crossOrigin se necessário
      if (optimizedSrc.includes('supabase')) {
        img.crossOrigin = 'anonymous';
      }
      
      img.src = optimizedSrc;
    });
  }

  // Otimizar imagem baseado no dispositivo
  function optimizeImageForDevice(src: string): string {
    if (!src.includes('supabase')) return src;
    
    try {
      const url = new URL(src);
      
      // Otimizações específicas para mobile
      if (isMobile) {
        url.searchParams.set('width', '800'); // Máximo 800px em mobile
        url.searchParams.set('quality', isSlowConnection ? '70' : '80');
        url.searchParams.set('format', 'webp');
        
        // Compressão adicional para conexões lentas
        if (isSlowConnection) {
          url.searchParams.set('resize', 'fill');
          url.searchParams.set('width', '600');
          url.searchParams.set('quality', '60');
        }
      } else {
        // Desktop - qualidade maior
        url.searchParams.set('width', '1200');
        url.searchParams.set('quality', '85');
        url.searchParams.set('format', 'webp');
      }
      
      return url.toString();
    } catch (error) {
      console.warn('Erro ao otimizar URL da imagem:', error);
      return src;
    }
  }  // CRITICAL: Lazy load otimizado para mobile
  function lazyLoadImage(
    img: HTMLImageElement,
    src: string,
    showPlaceholder = true,
    priority = false
  ) {
    if (showPlaceholder) {
      // Placeholder mais elaborado para mobile
      img.style.background = isMobile 
        ? 'linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 25%, #1a1a1a 50%, #2a2a2a 75%, #1a1a1a 100%)'
        : 'linear-gradient(90deg, #1a1a1a 0%, #2a2a2a 50%, #1a1a1a 100%)';
      img.style.backgroundSize = isMobile ? '300% 100%' : '200% 100%';
      img.style.animation = `skeleton-loading ${isMobile ? '1.2s' : '1.5s'} ease-in-out infinite`;
      
      // Adicionar loading indicator para mobile
      if (isMobile) {
        const container = img.closest('.main-image-container');
        if (container && !container.querySelector('.loading-indicator')) {
          const indicator = document.createElement('div');
          indicator.className = 'loading-indicator';
          indicator.innerHTML = `
            <div class="loading-spinner"></div>
            <span>Carregando imagem...</span>
          `;
          container.appendChild(indicator);
        }
      }
    }

    preloadImage(src, priority || isMobile)
      .then((cachedImg) => {
        img.src = cachedImg.src;
        img.style.background = '';
        img.style.animation = '';
        img.style.opacity = '0';

        // Remover loading indicator
        const container = img.closest('.main-image-container');
        const indicator = container?.querySelector('.loading-indicator');
        if (indicator) {
          indicator.remove();
        }

        // Fade in mais rápido em mobile
        requestAnimationFrame(() => {
          img.style.transition = isMobile ? 'opacity 0.2s ease' : 'opacity 0.3s ease';
          img.style.opacity = '1';
        });
      })
      .catch((error) => {
        console.error('Erro ao carregar imagem:', error);
        img.style.background = '';
        img.style.animation = '';
        
        // Remover loading indicator
        const container = img.closest('.main-image-container');
        const indicator = container?.querySelector('.loading-indicator');
        if (indicator) {
          indicator.remove();
        }
        
        // Mostrar placeholder de erro
        img.alt = 'Erro ao carregar imagem';
        if (isMobile) {
          // Mostrar erro mais visível em mobile
          const errorDiv = document.createElement('div');
          errorDiv.className = 'image-error-mobile';
          errorDiv.textContent = 'Erro ao carregar';
          container?.appendChild(errorDiv);
        }
      });
  }

  // Função global para abrir o modal - COM PRELOAD ANTECIPADO
  (window as any).abrirModalProduto = debounce((produto: any) => {
    if (isModalOpen) return; // Prevenir múltiplas aberturas

    produtoAtual = produto;
    isModalOpen = true;

    // CRITICAL: Preload da primeira imagem IMEDIATAMENTE (especialmente importante em mobile)
    if (produto.imagens && produto.imagens.length > 0) {
      preloadImage(produto.imagens[0], true).catch(() => {});
      
      // Em mobile, precarregar todas as imagens pequenas em paralelo
      if (isMobile && produto.imagens.length > 1 && !isSlowConnection) {
        produto.imagens.slice(1, 4).forEach((img: string, index: number) => {
          setTimeout(() => {
            preloadImage(img, index < 2).catch(() => {});
          }, index * 25); // Stagger bem pequeno
        });
      }
    }

    if (modal) {
      const specBateria = modal?.querySelector(
        '.spec-item:nth-child(1)',
      ) as HTMLElement;
      const specCodigo = modal?.querySelector(
        '.spec-item:nth-child(2)',
      ) as HTMLElement;
      const modalNome = modal.querySelector('.modal-nome');
      const modalDescricao = modal.querySelector('.modal-descricao');
      const modalPreco = modal.querySelector('.modal-preco');
      const modalCondicao = modal.querySelector('.modal-condicao');
      const modalCategoria = modal.querySelector('.modal-categoria');
      const modalBateria = modal.querySelector('.modal-bateria');
      const modalCodigo = modal.querySelector('.modal-codigo');
      const modalSpecs = modal.querySelector('.modal-specs') as HTMLElement;
      const specFallback = modal.querySelector('.spec-fallback') as HTMLElement;

      if (modalNome) modalNome.textContent = produto.nome;
      if (modalDescricao) modalDescricao.textContent = produto.descricao;
      if (modalPreco) modalPreco.textContent = produto.preco;
      if (modalCondicao) modalCondicao.textContent = produto.condicao;
      if (modalCategoria) modalCategoria.textContent = produto.categoria;

      // Atualiza bateria
      if (
        produto.bateria !== null &&
        produto.bateria !== undefined &&
        produto.bateria !== ''
      ) {
        if (modalBateria) modalBateria.textContent = `${produto.bateria}%`;
        if (specBateria) specBateria.style.display = 'flex';
        atualizarBateriaIcone(produto.bateria);
      } else {
        if (specBateria) specBateria.style.display = 'none';
      }

      // Atualiza código
      if (
        produto.codigo !== null &&
        produto.codigo !== undefined &&
        produto.codigo !== ''
      ) {
        if (modalCodigo) modalCodigo.textContent = produto.codigo;
        if (specCodigo) specCodigo.style.display = 'flex';
      } else {
        if (specCodigo) specCodigo.style.display = 'none';
      }

      // Exibe ou oculta o modal-specs e fallback
      if (
        produto.codigo !== null &&
        produto.codigo !== undefined &&
        produto.codigo !== '' &&
        produto.bateria !== null &&
        produto.bateria !== undefined &&
        produto.bateria !== ''
      ) {
        if (modalSpecs) modalSpecs.style.display = 'grid';
        if (specFallback) specFallback.style.display = 'none';
      } else {
        if (modalSpecs) modalSpecs.style.display = 'none';
        if (specFallback) specFallback.style.display = 'flex';
      }

      imagensAtuais = produto.imagens || [];
      renderGallery(imagensAtuais);

      // CRITICAL: Usar requestAnimationFrame para abrir modal
      requestAnimationFrame(() => {
        modal.classList.add('active');
        document.body.classList.add('modal-open');
      });
    }
  }, 100); // Debounce de 100ms

  function atualizarBateriaIcone(bateria: number) {
    const bateriaWrapper = modal?.querySelector('.bateria-icon-wrapper');
    const bateriaFill = modal?.querySelector('.bateria-fill') as SVGRectElement;

    if (!bateriaWrapper || !bateriaFill) return;

    const width = (bateria / 100) * 14;
    bateriaFill.setAttribute('width', width.toString());

    bateriaWrapper.classList.remove('bateria-verde', 'bateria-vermelho');

    if (bateria >= 80) {
      bateriaWrapper.classList.add('bateria-verde');
    } else {
      bateriaWrapper.classList.add('bateria-vermelho');
    }
  }

  // CRITICAL: Renderizar galeria com precarregamento inteligente
  function renderGallery(imagens: string[]) {
    if (!mainImage || !thumbnailsTrack) return;

    currentIndex = 0;

    if (imagens.length === 0) {
      mainImage.src = '';
      mainImage.style.display = 'none';
      thumbnailsTrack.innerHTML =
        '<div class="no-images">Sem imagens disponíveis</div>';
      return;
    }

    mainImage.style.display = 'block';

    // CRITICAL: Carregar imagem principal com prioridade alta
    lazyLoadImage(mainImage, imagens[0], true, true);

    // CRITICAL: Precarregar todas as imagens em mobile (conexão assumida)
    if (isMobile && !isSlowConnection) {
      // Mobile com boa conexão: precarregar todas
      setTimeout(() => {
        imagens.slice(1).forEach((img, index) => {
          setTimeout(() => {
            preloadImage(img, index < 2).catch(() => {}); // Primeiras 2 com alta prioridade
          }, index * 50);
        });
      }, 100);
    } else if (isMobile && isSlowConnection) {
      // Mobile com conexão lenta: apenas próxima
      if (imagens.length > 1) {
        setTimeout(() => {
          preloadImage(imagens[1]).catch(() => {});
        }, 300);
      }
    } else {
      // Desktop: estratégia original
      if (imagens.length > 1) {
        setTimeout(() => {
          preloadImage(imagens[1]).catch(() => {});
          if (imagens.length > 2) {
            setTimeout(() => preloadImage(imagens[2]).catch(() => {}), 100);
          }
        }, 200);
      }
    }

    // CRITICAL: Render thumbnails com DocumentFragment
    const fragment = document.createDocumentFragment();

    imagens.forEach((img, index) => {
      const thumb = document.createElement('div');
      thumb.className = `thumbnail ${index === 0 ? 'active' : ''}`;

      const thumbImg = document.createElement('img');
      thumbImg.alt = `Thumbnail ${index + 1}`;
      thumbImg.loading = 'lazy';
      thumbImg.style.opacity = '0';
      thumbImg.style.transition = 'opacity 0.3s ease';

      const overlay = document.createElement('div');
      overlay.className = 'thumb-overlay';

      thumb.appendChild(thumbImg);
      thumb.appendChild(overlay);

      // CRITICAL: Event delegation em vez de listener individual
      thumb.dataset.index = index.toString();

      // Lazy load com intersection observer para thumbnails
      const thumbObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target as HTMLImageElement;
              preloadImage(img.dataset.src!)
                .then((cachedImg) => {
                  img.src = cachedImg.src;
                  img.style.opacity = '1';
                  thumbObserver.unobserve(img);
                })
                .catch(() => {
                  img.style.opacity = '1';
                  thumbObserver.unobserve(img);
                });
            }
          });
        },
        { threshold: 0.1 },
      );

      thumbImg.dataset.src = img;
      thumbObserver.observe(thumbImg);

      fragment.appendChild(thumb);
    });

    thumbnailsTrack.innerHTML = '';
    thumbnailsTrack.appendChild(fragment);
  }

  // CRITICAL: Event delegation para thumbnails
  thumbnailsTrack?.addEventListener('click', (e) => {
    const thumb = (e.target as HTMLElement).closest('.thumbnail');
    if (!thumb) return;

    const index = parseInt((thumb as HTMLElement).dataset.index || '0');
    selectImage(index);
  });

  // Selecionar imagem - OTIMIZADO com precarregamento
  function selectImage(index: number) {
    if (!mainImage || !thumbnailsTrack) return;

    currentIndex = index;
    const novaImagem = imagensAtuais[index];

    // CRITICAL: Verificar se já está no cache
    if (imageCache.has(novaImagem)) {
      // Se já está carregada, trocar imediatamente
      mainImage.style.opacity = '0';
      setTimeout(() => {
        mainImage.src = imageCache.get(novaImagem)!.src;
        mainImage.style.opacity = '1';
      }, 150);
    } else {
      // Se não está carregada, mostrar placeholder e carregar
      lazyLoadImage(mainImage, novaImagem, false);
    }

    // CRITICAL: Precarregar imagens adjacentes
    const preloadNext = () => {
      if (index + 1 < imagensAtuais.length) {
        preloadImage(imagensAtuais[index + 1]).catch(() => {});
      }
      if (index - 1 >= 0) {
        preloadImage(imagensAtuais[index - 1]).catch(() => {});
      }
    };

    setTimeout(preloadNext, 100);

    // Atualizar thumbnails - OTIMIZADO
    const thumbs = thumbnailsTrack.querySelectorAll('.thumbnail');
    thumbs.forEach((thumb, i) => {
      thumb.classList.toggle('active', i === index);
    });

    // Scroll automático para thumbnail ativa - OTIMIZADO
    const activeThumb = thumbs[index] as HTMLElement;
    if (activeThumb) {
      activeThumb.scrollIntoView({
        behavior: 'smooth',
        block: 'nearest',
        inline: 'center',
      });
    }
  }

  // Fechar modal - OTIMIZADO
  function fecharModal() {
    if (!isModalOpen) return;

    requestAnimationFrame(() => {
      modal?.classList.remove('active');
      document.body.classList.remove('modal-open');
      isModalOpen = false;
      currentIndex = 0;
    });
  }

  // CRITICAL: Usar event delegation
  modalOverlay?.addEventListener('click', fecharModal);
  modalClose?.addEventListener('click', fecharModal);

  expandBtn?.addEventListener('click', () => {
    if (imagensAtuais.length > 0) {
      abrirImagemExpandida(currentIndex);
    }
  });

  mainImage?.addEventListener('click', () => {
    if (imagensAtuais.length > 0) {
      abrirImagemExpandida(currentIndex);
    }
  });

  function abrirImagemExpandida(index: number) {
    if (!modalImagemExpandida || !imagemExpandida || !contadorImagens) return;

    currentIndex = index;

    // CRITICAL: Lazy load
    lazyLoadImage(imagemExpandida, imagensAtuais[currentIndex]);

    contadorImagens.textContent = `${currentIndex + 1} / ${imagensAtuais.length}`;

    requestAnimationFrame(() => {
      modalImagemExpandida.classList.add('active');
    });
  }

  function fecharImagemExpandida() {
    requestAnimationFrame(() => {
      modalImagemExpandida?.classList.remove('active');
    });
  }

  btnCloseExpandido?.addEventListener('click', fecharImagemExpandida);

  modalImagemExpandida?.addEventListener('click', (e) => {
    if (e.target === modalImagemExpandida) {
      fecharImagemExpandida();
    }
  });

  // Navegação por teclado - OTIMIZADO
  document.addEventListener('keydown', (e: KeyboardEvent) => {
    if (modalImagemExpandida?.classList.contains('active')) {
      if (e.key === 'Escape') {
        fecharImagemExpandida();
      } else if (e.key === 'ArrowLeft' && currentIndex > 0) {
        selectImage(currentIndex - 1);
        abrirImagemExpandida(currentIndex);
      } else if (
        e.key === 'ArrowRight' &&
        currentIndex < imagensAtuais.length - 1
      ) {
        selectImage(currentIndex + 1);
        abrirImagemExpandida(currentIndex);
      }
    } else if (modal?.classList.contains('active')) {
      if (e.key === 'Escape') {
        fecharModal();
      } else if (e.key === 'ArrowLeft' && currentIndex > 0) {
        selectImage(currentIndex - 1);
      } else if (
        e.key === 'ArrowRight' &&
        currentIndex < imagensAtuais.length - 1
      ) {
        selectImage(currentIndex + 1);
      }
    }
  });

  // WhatsApp - OTIMIZADO
  const btnWhatsapp = modal?.querySelector('.btn-whatsapp');
  btnWhatsapp?.addEventListener('click', (e) => {
    e.preventDefault();

    if (produtoAtual) {
      const telefone = '5577981022246';
      const linkProduto = `${window.location.origin}/produto/${encodeURIComponent(
        produtoAtual.nome.toLowerCase().replace(/\s+/g, '-'),
      )}`;

      let mensagem = `Olá! Tenho interesse no *${produtoAtual.nome}*`;

      if (produtoAtual.codigo) {
        mensagem += `\nCódigo: ${produtoAtual.codigo}`;
      }

      mensagem += `\n\nLink: ${linkProduto}`;

      const url = `https://wa.me/${telefone}?text=${encodeURIComponent(mensagem)}`;

      window.open(url, '_blank');
    }
  });
</script>
