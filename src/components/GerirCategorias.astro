---
// src/components/GerirCategorias.astro
---

<div id="modal-categorias" class="modal-categorias">
    <div class="modal-overlay"></div>
    <div class="modal-content">
        <button class="modal-close" aria-label="Fechar">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
        </button>

        <div class="modal-header">
            <h2>Gerenciar Categorias</h2>
        </div>

        <div class="modal-body">
            <form id="form-nova-categoria" class="add-category-form">
                <input 
                    type="text" 
                    id="nova-categoria-nome" 
                    placeholder="Nome da nova categoria"
                    required
                />
                <button type="submit" class="btn-add">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                    Adicionar
                </button>
            </form>

            <div class="categories-list" id="categories-list">
                <!-- Categorias serÃ£o inseridas aqui -->
            </div>
        </div>
    </div>
</div>

<style>
    .modal-categorias {
        position: fixed;
        inset: 0;
        z-index: 2000;
        display: none;
        align-items: center;
        justify-content: center;
        padding: 1rem;
    }

    .modal-categorias.active {
        display: flex;
    }

    .modal-categorias .modal-overlay {
        position: absolute;
        inset: 0;
        background: rgba(0, 0, 0, 0.95);
        backdrop-filter: blur(10px);
    }

    .modal-categorias .modal-content {
        position: relative;
        background: #0a0a0a;
        border: 1px solid #2a2a2a;
        border-radius: 24px;
        max-width: 600px;
        width: 100%;
        max-height: 80vh;
        overflow: hidden;
        z-index: 1;
        animation: slideUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .modal-header {
        padding: 2rem 2rem 1rem;
        border-bottom: 1px solid #1a1a1a;
    }

    .modal-header h2 {
        font-family: "Halenoir", sans-serif;
        font-size: 1.8rem;
        color: var(--cor-primaria);
        margin: 0;
    }

    .modal-close {
        position: absolute;
        top: 1rem;
        right: 1rem;
        background: rgba(0, 0, 0, 0.8);
        border: 1px solid #2a2a2a;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 10;
    }

    .modal-close:hover {
        background: #fff;
        color: #000;
        transform: rotate(90deg);
    }

    .modal-close svg {
        width: 20px;
        height: 20px;
    }

    .modal-body {
        padding: 2rem;
        max-height: calc(80vh - 120px);
        overflow-y: auto;
    }

    .add-category-form {
        display: flex;
        gap: 0.75rem;
        margin-bottom: 2rem;
    }

    .add-category-form input {
        flex: 1;
        background: #0f0f0f;
        border: 1px solid #2a2a2a;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        color: #fff;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .add-category-form input:focus {
        outline: none;
        border-color: #fff;
        background: #1a1a1a;
    }

    .btn-add {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        background: #fff;
        border: none;
        color: #000;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .btn-add:hover {
        background: #e5e5e5;
        transform: translateY(-2px);
    }

    .btn-add svg {
        width: 18px;
        height: 18px;
    }

    .categories-list {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .category-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem 1.25rem;
        background: #0f0f0f;
        border: 1px solid #2a2a2a;
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    .category-item:hover {
        border-color: #404040;
        background: #1a1a1a;
    }

    .category-item.editing {
        border-color: #fff;
    }

    .category-name {
        font-size: 1rem;
        color: #fff;
        font-weight: 500;
    }

    .category-input {
        flex: 1;
        background: transparent;
        border: none;
        color: #fff;
        font-size: 1rem;
        font-weight: 500;
        padding: 0;
    }

    .category-input:focus {
        outline: none;
    }

    .category-actions {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        background: transparent;
        border: 1px solid #2a2a2a;
        width: 36px;
        height: 36px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        color: #999;
    }

    .btn-icon:hover {
        border-color: #fff;
        color: #fff;
    }

    .btn-icon.delete:hover {
        border-color: #ef4444;
        color: #ef4444;
        background: rgba(239, 68, 68, 0.1);
    }

    .btn-icon.save:hover {
        border-color: #22c55e;
        color: #22c55e;
        background: rgba(34, 197, 94, 0.1);
    }

    .btn-icon svg {
        width: 18px;
        height: 18px;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 1rem;
        color: #666;
    }

    .empty-state svg {
        width: 64px;
        height: 64px;
        margin-bottom: 1rem;
        opacity: 0.5;
    }
</style>

<script>
    import { productsStore } from '../lib/productsStore';

    const modal = document.getElementById('modal-categorias');
    const modalClose = modal?.querySelector('.modal-close');
    const modalOverlay = modal?.querySelector('.modal-overlay');
    const form = document.getElementById('form-nova-categoria') as HTMLFormElement;
    const input = document.getElementById('nova-categoria-nome') as HTMLInputElement;
    const list = document.getElementById('categories-list');

    function renderCategories() {
        if (!list) return;
        
        const categories = productsStore.getCategories();
        
        if (categories.length === 0) {
            list.innerHTML = `
                <div class="empty-state">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 7H21M3 12H21M3 17H21" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                    <p>Nenhuma categoria cadastrada</p>
                </div>
            `;
            return;
        }

        list.innerHTML = categories.map(cat => `
            <div class="category-item" data-id="${cat.id}">
                <span class="category-name">${cat.nome}</span>
                <div class="category-actions">
                    <button class="btn-icon edit" data-action="edit" title="Editar">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M11 4H4C3.46957 4 2.96086 4.21071 2.58579 4.58579C2.21071 4.96086 2 5.46957 2 6V20C2 20.5304 2.21071 21.0391 2.58579 21.4142C2.96086 21.7893 3.46957 22 4 22H18C18.5304 22 19.0391 21.7893 19.4142 21.4142C19.7893 21.0391 20 20.5304 20 20V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M18.5 2.50001C18.8978 2.10219 19.4374 1.87869 20 1.87869C20.5626 1.87869 21.1022 2.10219 21.5 2.50001C21.8978 2.89784 22.1213 3.43739 22.1213 4.00001C22.1213 4.56263 21.8978 5.10219 21.5 5.50001L12 15L8 16L9 12L18.5 2.50001Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                    <button class="btn-icon delete" data-action="delete" title="Excluir">
                        <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M3 6H5H21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            <path d="M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        </svg>
                    </button>
                </div>
            </div>
        `).join('');

        // Adicionar event listeners
        list.querySelectorAll('.btn-icon').forEach(btn => {
            btn.addEventListener('click', handleCategoryAction);
        });
    }

    function handleCategoryAction(e: Event) {
        const target = e.currentTarget as HTMLElement;
        const action = target.dataset.action;
        const item = target.closest('.category-item') as HTMLElement;
        const id = item?.dataset.id;
        
        if (!id) return;

        if (action === 'delete') {
            if (confirm('Deseja realmente excluir esta categoria?')) {
                productsStore.deleteCategory(id);
                renderCategories();
            }
        } else if (action === 'edit') {
            startEditing(item);
        }
    }

    function startEditing(item: HTMLElement) {
        const nameSpan = item.querySelector('.category-name');
        const actionsDiv = item.querySelector('.category-actions');
        const currentName = nameSpan?.textContent || '';
        
        if (!nameSpan || !actionsDiv) return;

        item.classList.add('editing');
        
        nameSpan.innerHTML = `<input type="text" class="category-input" value="${currentName}" />`;
        actionsDiv.innerHTML = `
            <button class="btn-icon save" data-action="save" title="Salvar">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </button>
            <button class="btn-icon cancel" data-action="cancel" title="Cancelar">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
            </button>
        `;

        const inputField = item.querySelector('.category-input') as HTMLInputElement;
        inputField?.focus();
        inputField?.select();

        actionsDiv.querySelectorAll('.btn-icon').forEach(btn => {
            btn.addEventListener('click', (e: Event) => {
                const target = e.currentTarget as HTMLElement;
                const action = target.dataset.action;
                const id = item.dataset.id;
                
                if (action === 'save' && id) {
                    const newName = inputField?.value.trim();
                    if (newName) {
                        productsStore.updateCategory(id, newName);
                    }
                }
                renderCategories();
            });
        });
    }

    // Adicionar nova categoria
    form?.addEventListener('submit', (e) => {
        e.preventDefault();
        const nome = input?.value.trim();
        
        if (nome) {
            productsStore.addCategory(nome);
            input.value = '';
            renderCategories();
        }
    });

    // Abrir/Fechar modal
    function abrirModal() {
        modal?.classList.add('active');
        const body = document.body as HTMLBodyElement;
        body.style.overflow = 'hidden';
        renderCategories();
    }

    function fecharModal() {
        modal?.classList.remove('active');
        const body = document.body as HTMLBodyElement;
        body.style.overflow = '';
    }

    modalClose?.addEventListener('click', fecharModal);
    modalOverlay?.addEventListener('click', fecharModal);

    // Expor funÃ§Ã£o globalmente
    (window as any).abrirGerirCategorias = abrirModal;
</script>