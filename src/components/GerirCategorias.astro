---
import '../styles/components/gerir-categorias.css';
import { categoryService } from '../lib/supabase';
---

<div id="modal-categorias" class="gc-modal">
    <div class="gc-modal-overlay"></div>
    <div class="gc-modal-content">
        <button type="button" class="gc-modal-close" aria-label="Fechar">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
        </button>

        <div class="gc-modal-header">
            <h2>Gerenciar Categorias</h2>
        </div>

        <div class="gc-modal-body">
            <!-- Formulário com validação -->
            <form id="form-nova-categoria" class="gc-add-form">
                <div class="gc-input-group">
                    <input 
                        type="text" 
                        id="nova-categoria-nome" 
                        name="categoria"
                        placeholder="Digite o nome da categoria"
                        minlength="2"
                        maxlength="50"
                        pattern="[A-Za-zÀ-ÖØ-öø-ÿ0-9\s]+"
                        required
                        autocomplete="off"
                    />
                    <span class="gc-error-message"></span>
                </div>
                <button type="submit" class="gc-btn-add" disabled>
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                    Adicionar
                </button>
            </form>

            <!-- Loading State -->
            <div class="gc-loading" id="gc-loading">
                <div class="gc-spinner"></div>
                <span>Carregando categorias...</span>
            </div>

            <!-- Lista de Categorias -->
            <div class="gc-categories-list" id="categories-list"></div>
        </div>
    </div>
</div>

<script>
import { categoryService } from '../lib/supabase';

// Tipos
interface Category {
    id: string;
    nome: string;
    created_at?: string;
}

// Elements
const modal = document.getElementById('modal-categorias') as HTMLDivElement;
const overlay = modal?.querySelector('.gc-modal-overlay') as HTMLDivElement;
const closeBtn = modal?.querySelector('.gc-modal-close') as HTMLButtonElement;
const form = document.getElementById('form-nova-categoria') as HTMLFormElement;
const input = document.getElementById('nova-categoria-nome') as HTMLInputElement;
const addButton = form?.querySelector('.gc-btn-add') as HTMLButtonElement;
const list = document.getElementById('categories-list') as HTMLDivElement;
const loading = document.getElementById('gc-loading') as HTMLDivElement;
const errorMessage = form?.querySelector('.gc-error-message') as HTMLSpanElement;

// Estado
let isLoading = false;
let categories: Category[] = [];

// Validação do Input
function validateInput(value: string): boolean {
    const minLength = 2;
    const maxLength = 50;
    const pattern = /^[A-Za-zÀ-ÖØ-öø-ÿ0-9\s]+$/;

    if (!value || value.length < minLength) {
        errorMessage.textContent = `Mínimo de ${minLength} caracteres`;
        return false;
    }

    if (value.length > maxLength) {
        errorMessage.textContent = `Máximo de ${maxLength} caracteres`;
        return false;
    }

    if (!pattern.test(value)) {
        errorMessage.textContent = 'Use apenas letras, números e espaços';
        return false;
    }

    const exists = categories.some(cat => 
        cat.nome.toLowerCase() === value.toLowerCase()
    );
    
    if (exists) {
        errorMessage.textContent = 'Esta categoria já existe';
        return false;
    }

    errorMessage.textContent = '';
    return true;
}

// Input Handler
input?.addEventListener('input', (e) => {
    const value = (e.target as HTMLInputElement).value.trim();
    const isValid = validateInput(value);
    addButton.disabled = !isValid;
});

// Render Categories
async function renderCategories() {
    if (!list || !loading || isLoading) return;
    
    try {
        isLoading = true;
        loading.classList.add('active');
        list.innerHTML = '';
        
        categories = await categoryService.getAll() || [];

        if (categories.length === 0) {
            list.innerHTML = `
                <div class="gc-empty-state">
                    <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 7H21M3 12H21M3 17H21" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                    </svg>
                    <p>Nenhuma categoria cadastrada</p>
                </div>`;
            return;
        }

        const fragment = document.createDocumentFragment();

        categories.forEach(cat => {
            const item = createCategoryItem(cat);
            fragment.appendChild(item);
        });

        list.appendChild(fragment);

    } catch (error) {
        console.error('Erro ao carregar categorias:', error);
        list.innerHTML = `
            <div class="gc-empty-state gc-error">
                <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
                <p>Erro ao carregar categorias</p>
                <button type="button" class="gc-btn-retry" onclick="window.location.reload()">
                    Tentar novamente
                </button>
            </div>`;
    } finally {
        isLoading = false;
        loading.classList.remove('active');
    }
}

// Create Category Item
function createCategoryItem(cat: Category): HTMLDivElement {
    const item = document.createElement('div');
    item.classList.add('gc-category-item');
    item.dataset.id = cat.id;

    const name = document.createElement('span');
    name.classList.add('gc-category-name');
    name.textContent = cat.nome;

    const actions = document.createElement('div');
    actions.classList.add('gc-category-actions');

    const editBtn = document.createElement('button');
    editBtn.type = 'button';
    editBtn.className = 'gc-btn-icon edit';
    editBtn.setAttribute('aria-label', 'Editar categoria');
    editBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>`;

    const delBtn = document.createElement('button');
    delBtn.type = 'button';
    delBtn.className = 'gc-btn-icon delete';
    delBtn.setAttribute('aria-label', 'Excluir categoria');
    delBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M3 6h18M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2m3 0v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6h14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>`;

    actions.append(editBtn, delBtn);
    item.append(name, actions);

    editBtn.addEventListener('click', () => startEditing(item, cat));
    delBtn.addEventListener('click', () => deleteCategory(cat.id));

    return item;
}

// Delete Category
async function deleteCategory(id: string) {
    if (!confirm('Tem certeza que deseja excluir esta categoria?')) return;

    const item = list?.querySelector(`[data-id="${id}"]`);
    if (!item) return;

    try {
        item.classList.add('gc-deleting');
        await categoryService.delete(id);
        
        // Atualiza lista local e UI
        categories = categories.filter(c => c.id !== id);
        item.addEventListener('transitionend', () => {
            item.remove();
            if (categories.length === 0) renderCategories();
        });
        
        window.dispatchEvent(new Event('produtos-updated'));
    } catch (error) {
        console.error('Erro ao excluir categoria:', error);
        item.classList.remove('gc-deleting');
        alert('Erro ao excluir categoria. Tente novamente.');
    }
}

// Edit Category
function startEditing(item: HTMLDivElement, cat: Category) {
    const nameSpan = item.querySelector('.gc-category-name');
    const actions = item.querySelector('.gc-category-actions');
    if (!nameSpan || !actions) return;

    const originalContent = item.innerHTML;
    
    nameSpan.innerHTML = `
        <input type="text" 
            class="gc-category-input" 
            value="${cat.nome}"
            minlength="2"
            maxlength="50"
            pattern="[A-Za-zÀ-ÖØ-öø-ÿ0-9\s]+"
            required
        />
    `;
    
    actions.innerHTML = `
        <button type="button" class="gc-btn-icon save" aria-label="Salvar">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M20 6L9 17L4 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
        </button>
        <button type="button" class="gc-btn-icon cancel" aria-label="Cancelar">
            <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
        </button>
    `;

    const input = nameSpan.querySelector('input');
    const saveBtn = actions.querySelector('.save');
    const cancelBtn = actions.querySelector('.cancel');

    if (input) {
        input.focus();
        input.select();
    }

    const handleSave = async () => {
        const newName = input?.value.trim();
        if (!newName || newName === cat.nome) {
            handleCancel();
            return;
        }

        // Validação
        if (!validateInput(newName)) {
            input?.focus();
            return;
        }

        try {
            item.classList.add('gc-saving');
            await categoryService.update(cat.id, newName);
            
            // Atualiza lista local
            const index = categories.findIndex(c => c.id === cat.id);
            if (index !== -1) categories[index].nome = newName;
            
            window.dispatchEvent(new Event('produtos-updated'));
            renderCategories();
        } catch (error) {
            console.error('Erro ao atualizar categoria:', error);
            item.classList.remove('gc-saving');
            item.innerHTML = originalContent;
            alert('Erro ao atualizar categoria. Tente novamente.');
        }
    };

    const handleCancel = () => {
        item.innerHTML = originalContent;
    };

    saveBtn?.addEventListener('click', handleSave);
    cancelBtn?.addEventListener('click', handleCancel);

    input?.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleSave();
        } else if (e.key === 'Escape') {
            handleCancel();
        }
    });
}

// Form Submit
form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    if (!input || input.disabled) return;

    const nome = input.value.trim();
    if (!nome || !validateInput(nome)) return;

    try {
        input.disabled = true;
        addButton.disabled = true;
        form.classList.add('gc-submitting');

        await categoryService.create(nome);
        
        input.value = '';
        input.disabled = false;
        addButton.disabled = true;
        form.classList.remove('gc-submitting');
        
        renderCategories();
        window.dispatchEvent(new Event('produtos-updated'));
    } catch (error) {
        console.error('Erro ao criar categoria:', error);
        input.disabled = false;
        addButton.disabled = false;
        form.classList.remove('gc-submitting');
        alert('Erro ao criar categoria. Tente novamente.');
    }
});

// Modal Controls
function abrirModal() {
    if (!modal) return;
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
    input?.focus();
    renderCategories();
}

function fecharModal() {
    if (!modal || isLoading) return;
    modal.classList.remove('active');
    document.body.style.overflow = '';
    if (input) {
        input.value = '';
        input.disabled = false;
    }
    if (addButton) addButton.disabled = true;
    if (errorMessage) errorMessage.textContent = '';
}

// Event Listeners
closeBtn?.addEventListener('click', fecharModal);
overlay?.addEventListener('click', fecharModal);

document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal?.classList.contains('active')) {
        fecharModal();
    }
});

// Expose to window
window.abrirGerirCategorias = abrirModal;
</script>