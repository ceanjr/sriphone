---
const { produto } = Astro.props;
import { supabase } from '../lib/supabase';

const { data: categorias } = await supabase
  .from('categorias')
  .select('*')
  .order('nome');
---

<form id="editar-produto-form" class="space-y-4 max-w-2xl">
  <input type="hidden" name="id" value={produto.id} />

  <div>
    <label class="block text-sm font-medium mb-1">Nome *</label>
    <input type="text" name="nome" required value={produto.nome} class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white" />
  </div>

  <div>
    <label class="block text-sm font-medium mb-1">Código *</label>
    <input type="text" name="codigo" required value={produto.codigo} class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white" />
  </div>

  <div>
    <label class="block text-sm font-medium mb-1">Preço *</label>
    <input type="number" name="preco" required step="0.01" value={produto.preco} class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white" />
  </div>

  <div>
    <label class="block text-sm font-medium mb-1">Categoria *</label>
    <select name="categoria_id" required class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white">
      {categorias?.map((cat) => (
        <option value={cat.id} selected={cat.id === produto.categoria_id}>{cat.nome}</option>
      ))}
    </select>
  </div>

  <div>
    <label class="block text-sm font-medium mb-1">Condição *</label>
    <select name="condicao" required class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white">
      <option value="Novo" selected={produto.condicao === 'Novo'}>Novo</option>
      <option value="Semi-Novo" selected={produto.condicao === 'Semi-Novo'}>Semi-Novo</option>
      <option value="Usado" selected={produto.condicao === 'Usado'}>Usado</option>
    </select>
  </div>

  <div>
    <label class="block text-sm font-medium mb-1">Bateria (%)</label>
    <input type="number" name="bateria" min="0" max="100" value={produto.bateria || ''} class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white" />
  </div>

  <div>
    <label class="block text-sm font-medium mb-1">Descrição</label>
    <textarea name="descricao" rows="3" class="w-full rounded-lg border border-gray-600 bg-gray-700 px-4 py-2 text-white">{produto.descricao || ''}</textarea>
  </div>

  <div>
    <label class="flex items-center gap-2">
      <input type="checkbox" name="ativo" checked={produto.ativo !== false} class="rounded" />
      <span class="text-sm">Produto ativo</span>
    </label>
  </div>

  <button type="submit" class="w-full rounded-lg bg-white px-4 py-3 font-medium text-black hover:bg-gray-200">
    Salvar Alterações
  </button>
</form>

<script>
  import { editarProduto } from '../lib/crud';

  const form = document.getElementById('editar-produto-form') as HTMLFormElement;

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const id = formData.get('id') as string;
    
    const produto = {
      nome: formData.get('nome') as string,
      codigo: formData.get('codigo') as string,
      preco: parseFloat(formData.get('preco') as string),
      categoria_id: formData.get('categoria_id') as string,
      condicao: formData.get('condicao') as string,
      bateria: formData.get('bateria') ? parseInt(formData.get('bateria') as string) : null,
      descricao: formData.get('descricao') as string || null,
      ativo: formData.get('ativo') === 'on',
    };

    const result = await editarProduto(id, produto);

    if (result.success) {
      alert('Produto atualizado!');
      location.href = '/admin/produtos';
    } else {
      alert(result.error || 'Erro ao atualizar');
    }
  });
</script>
