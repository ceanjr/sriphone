---
import '../../styles/components/mobile-nav.css';

const menuItems = [
  { title: 'Dashboard', icon: 'layout-dashboard', href: '/admin/dashboard' },
  { title: 'Produtos', icon: 'package', href: '/admin/produtos' },
  { title: 'Categorias', icon: 'folder-tree', href: '/admin/categorias' },
  { title: 'Catálogo', icon: 'external-link', href: '/catalogo' },
];

const currentPath = Astro.url.pathname;
---
<nav class="mobile-bottom-nav">
  {menuItems.map((item) => {
    const isActive =
      currentPath === item.href || currentPath.startsWith(item.href + '/');
    return (
      <a
        href={item.href}
        class={`mobile-nav-item ${isActive ? 'active' : ''}`}
        target={item.title === 'Catálogo' ? '_self' : '_self'}
        rel="noopener noreferrer"
      >
        <span class="mobile-nav-icon">
          <!-- Ícones simples (você pode substituir por lucide-react depois) -->
          {item.icon === 'layout-dashboard' && (
            <svg viewBox="0 0 24 24" stroke="currentColor" fill="none">
              <rect x="3" y="3" width="7" height="7" stroke-width="2" />
              <rect x="14" y="3" width="7" height="7" stroke-width="2" />
              <rect x="14" y="14" width="7" height="7" stroke-width="2" />
              <rect x="3" y="14" width="7" height="7" stroke-width="2" />
            </svg>
          )}
          {item.icon === 'package' && (
            <svg viewBox="0 0 24 24" stroke="currentColor" fill="none">
              <path
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4a2 2 0 0 0 1-1.73z"
              />
            </svg>
          )}
          {item.icon === 'folder-tree' && (
            <svg viewBox="0 0 24 24" stroke="currentColor" fill="none">
              <path
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M6 3v6h6V3H6zm0 12v6h6v-6H6zm6-6h6v6h-6z"
              />
            </svg>
          )}
          {item.icon === 'external-link' && (
            <svg viewBox="0 0 24 24" stroke="currentColor" fill="none">
              <path
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M10 13l9-9m0 0h-5m5 0v5M21 21H3V3"
              />
            </svg>
          )}
        </span>
        <span class="mobile-nav-label">{item.title}</span>
      </a>
    );
  })}
</nav>

<script is:inline>
  import { authService } from '../../lib/supabase';

  // Aguardar DOM carregar completamente
  document.addEventListener('DOMContentLoaded', () => {
    const menuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    const backdrop = document.getElementById('mobile-backdrop');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const logoutBtn = document.getElementById('mobile-logout-btn');

    console.log('MobileNav: Elementos carregados', {
      menuBtn,
      mobileMenu,
      backdrop,
    });

    function toggleMenu() {
      if (!mobileMenu || !backdrop) {
        console.error('MobileNav: Elementos não encontrados');
        return;
      }

      const isOpen = !mobileMenu.classList.contains('hidden');

      console.log('MobileNav: Toggle menu', { isOpen });

      if (isOpen) {
        mobileMenu.classList.add('hidden');
        backdrop.classList.add('hidden');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        document.body.style.overflow = '';
      } else {
        mobileMenu.classList.remove('hidden');
        backdrop.classList.remove('hidden');
        menuIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    }

    menuBtn?.addEventListener('click', (e) => {
      console.log('MobileNav: Botão clicado');
      e.preventDefault();
      e.stopPropagation();
      toggleMenu();
    });

    backdrop?.addEventListener('click', () => {
      console.log('MobileNav: Backdrop clicado');
      toggleMenu();
    });

    logoutBtn?.addEventListener('click', async () => {
      if (confirm('Tem certeza que deseja sair?')) {
        try {
          // Fazer logout no Supabase (limpa localStorage)
          await authService.signOut();

          // Chamar endpoint para limpar cookies do servidor
          await fetch('/api/admin/auth/logout', {
            method: 'POST',
            credentials: 'include',
          });

          // Redirecionar para login
          window.location.href = '/admin/login';
        } catch (error) {
          console.error('Erro ao fazer logout:', error);
          // Mesmo com erro, redirecionar para login
          window.location.href = '/admin/login';
        }
      }
    });
  });
</script>
