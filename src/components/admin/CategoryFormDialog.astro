---
interface Props {
  categoria?: any;
}

const { categoria } = Astro.props;
const isEdit = !!categoria;
---

<div
  id="category-dialog"
  class="fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm"
>
  <div class="relative w-full max-w-md rounded-lg border border-[#2a2a2a] bg-[#0a0a0a] p-6 m-4">
    <div class="mb-6 flex items-center justify-between">
      <h2 class="text-xl font-bold text-white">
        {isEdit ? 'Editar Categoria' : 'Nova Categoria'}
      </h2>
      <button
        type="button"
        id="close-category-dialog"
        class="rounded-lg p-2 text-[#a0a0a0] transition hover:bg-[#1a1a1a] hover:text-white"
      >
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <form id="category-form" class="space-y-4">
      <input type="hidden" id="category-id" name="id" value={categoria?.id || ''} />

      <div>
        <label for="category-nome" class="block text-sm font-medium text-[#e0e0e0]">
          Nome da Categoria *
        </label>
        <input
          type="text"
          id="category-nome"
          name="nome"
          required
          value={categoria?.nome || ''}
          class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          placeholder="iPhone"
        />
      </div>

      <div class="flex items-center justify-end gap-3 pt-4">
        <button
          type="button"
          id="cancel-category-btn"
          class="rounded-lg border border-[#2a2a2a] bg-transparent px-4 py-2 text-sm font-medium text-white transition hover:bg-[#1a1a1a]"
        >
          Cancelar
        </button>
        <button
          type="submit"
          id="submit-category-btn"
          class="rounded-lg bg-white px-4 py-2 text-sm font-medium text-black transition hover:bg-[#e0e0e0] disabled:opacity-50"
        >
          {isEdit ? 'Salvar' : 'Criar'}
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  import { criarCategoria, editarCategoria } from '../../lib/crud';

  const dialog = document.getElementById('category-dialog');
  const form = document.getElementById('category-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-category-btn') as HTMLButtonElement;
  const closeBtn = document.getElementById('close-category-dialog');
  const cancelBtn = document.getElementById('cancel-category-btn');

  window.openCategoryDialog = (categoria?: any) => {
    if (categoria) {
      (document.getElementById('category-id') as HTMLInputElement).value = categoria.id || '';
      (document.getElementById('category-nome') as HTMLInputElement).value = categoria.nome || '';
    }
    
    dialog?.classList.remove('hidden');
    dialog?.classList.add('flex');
  };

  const closeDialog = () => {
    dialog?.classList.add('hidden');
    dialog?.classList.remove('flex');
    form?.reset();
  };

  closeBtn?.addEventListener('click', closeDialog);
  cancelBtn?.addEventListener('click', closeDialog);

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const categoryId = formData.get('id') as string;
    const nome = formData.get('nome') as string;
    const isEdit = !!categoryId;

    submitBtn.disabled = true;
    submitBtn.textContent = isEdit ? 'Salvando...' : 'Criando...';

    try {
      const result = isEdit 
        ? await editarCategoria(categoryId, nome)
        : await criarCategoria(nome);

      if (!result.success) {
        throw new Error(result.error);
      }

      window.showToast(
        isEdit ? 'Categoria atualizada!' : 'Categoria criada!',
        'success'
      );

      closeDialog();
      setTimeout(() => window.location.reload(), 300);
    } catch (error: any) {
      window.showToast(error.message || 'Erro ao salvar', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = isEdit ? 'Salvar' : 'Criar';
    }
  });

  declare global {
    interface Window {
      openCategoryDialog: (categoria?: any) => void;
    }
  }
</script>
