---
interface Props {
  categoria?: any;
}

const { categoria } = Astro.props;
const isEdit = !!categoria;
---

<div
  id="category-dialog"
  class="fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm"
>
  <div class="relative w-full max-w-md rounded-lg border border-[#2a2a2a] bg-[#0a0a0a] p-6 m-4">
    <!-- Header -->
    <div class="mb-6 flex items-center justify-between">
      <h2 class="text-xl font-bold text-white">
        {isEdit ? 'Editar Categoria' : 'Nova Categoria'}
      </h2>
      <button
        type="button"
        id="close-category-dialog"
        class="rounded-lg p-2 text-[#a0a0a0] transition hover:bg-[#1a1a1a] hover:text-white"
        aria-label="Fechar"
      >
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Form -->
    <form id="category-form" class="space-y-4">
      <input type="hidden" id="category-id" name="id" value={categoria?.id || ''} />

      <!-- Nome -->
      <div>
        <label for="category-nome" class="block text-sm font-medium text-[#e0e0e0]">
          Nome da Categoria *
        </label>
        <input
          type="text"
          id="category-nome"
          name="nome"
          required
          value={categoria?.nome || ''}
          class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          placeholder="iPhone"
        />
      </div>

      <!-- Botões -->
      <div class="flex items-center justify-end gap-3 pt-4">
        <button
          type="button"
          id="cancel-category-btn"
          class="rounded-lg border border-[#2a2a2a] bg-transparent px-4 py-2 text-sm font-medium text-white transition hover:bg-[#1a1a1a]"
        >
          Cancelar
        </button>
        <button
          type="submit"
          id="submit-category-btn"
          class="rounded-lg bg-white px-4 py-2 text-sm font-medium text-black transition hover:bg-[#e0e0e0] disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isEdit ? 'Salvar' : 'Criar Categoria'}
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  const dialog = document.getElementById('category-dialog');
  const form = document.getElementById('category-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-category-btn') as HTMLButtonElement;
  const closeBtn = document.getElementById('close-category-dialog');
  const cancelBtn = document.getElementById('cancel-category-btn');

  // Abrir dialog
  window.openCategoryDialog = (categoria?: any) => {
    if (categoria) {
      (document.getElementById('category-id') as HTMLInputElement).value = categoria.id || '';
      (document.getElementById('category-nome') as HTMLInputElement).value = categoria.nome || '';
    }
    
    dialog?.classList.remove('hidden');
    dialog?.classList.add('flex');
  };

  // Fechar dialog
  const closeDialog = () => {
    dialog?.classList.add('hidden');
    dialog?.classList.remove('flex');
    form?.reset();
  };

  closeBtn?.addEventListener('click', closeDialog);
  cancelBtn?.addEventListener('click', closeDialog);

  // Submit do formulário
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const categoryId = formData.get('id') as string;
    const isEdit = !!categoryId;

    const categoria = {
      nome: formData.get('nome'),
    };

    console.log('📤 Enviando categoria:', categoria, 'isEdit:', isEdit);

    submitBtn.disabled = true;
    submitBtn.textContent = isEdit ? 'Salvando...' : 'Criando...';

    try {
      const url = isEdit ? `/api/admin/categorias/${categoryId}` : '/api/admin/categorias';
      const method = isEdit ? 'PUT' : 'POST';

      console.log(`📤 ${method} ${url}`);

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(categoria),
        cache: 'no-store',
      });

      console.log('📥 Response status:', response.status, response.statusText);
      console.log('📥 Response headers:', Object.fromEntries(response.headers.entries()));

      let data;
      try {
        const text = await response.text();
        console.log('📥 Response text:', text);
        if (text) {
          data = JSON.parse(text);
          console.log('📥 Parsed data:', data);
        } else {
          console.error('❌ Resposta vazia!');
          data = { error: 'Resposta vazia do servidor' };
        }
      } catch (parseError) {
        console.error('❌ Erro ao fazer parse do JSON:', parseError);
        data = { error: 'Resposta inválida do servidor' };
      }

      if (!response.ok) {
        throw new Error(data.error || `Erro ${response.status}: ${response.statusText}`);
      }

      console.log('✅ Sucesso!', data);
      window.showToast(
        isEdit ? 'Categoria atualizada!' : 'Categoria criada!',
        'success'
      );

      closeDialog();
      
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error: any) {
      console.error('❌ Erro ao salvar categoria:', error);
      window.showToast(error.message || 'Erro ao salvar categoria', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = isEdit ? 'Salvar' : 'Criar Categoria';
    }
  });

  // Expor função globalmente
  declare global {
    interface Window {
      openCategoryDialog: (categoria?: any) => void;
    }
  }
</script>
