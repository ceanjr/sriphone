---
// Toast notification component
---

<div id="toast-container" aria-live="polite"></div>

<style>
  #toast-container {
    position: fixed;
    top: 16px;
    right: 16px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 8px;
    pointer-events: none;
  }

  #toast-container > * {
    pointer-events: auto;
  }
</style>

<script>
  interface Toast {
    id: string;
    message: string;
    type: 'success' | 'error' | 'warning' | 'info';
  }

  class ToastManager {
    private container: HTMLElement | null;
    private toasts: Map<string, HTMLElement> = new Map();

    constructor() {
      this.container = document.getElementById('toast-container');
    }

    show(message: string, type: Toast['type'] = 'info', duration: number = 5000) {
      if (!this.container) return;

      const id = `toast-${Date.now()}-${Math.random()}`;
      const toast = this.createToastElement(id, message, type);
      
      this.toasts.set(id, toast);
      this.container.appendChild(toast);

      // Animação de entrada
      setTimeout(() => {
        toast.style.transform = 'translateX(0)';
        toast.style.opacity = '1';
      }, 10);

      // Auto-remover após duração
      if (duration > 0) {
        setTimeout(() => {
          this.hide(id);
        }, duration);
      }

      return id;
    }

    hide(id: string) {
      const toast = this.toasts.get(id);
      if (!toast) return;

      // Animação de saída
      toast.style.transform = 'translateX(400px)';
      toast.style.opacity = '0';

      setTimeout(() => {
        toast.remove();
        this.toasts.delete(id);
      }, 300);
    }

    private createToastElement(id: string, message: string, type: Toast['type']): HTMLElement {
      const toast = document.createElement('div');
      toast.id = id;

      const colors = this.getTypeColors(type);

      toast.style.cssText = `
        display: flex;
        align-items: center;
        gap: 12px;
        min-width: 300px;
        max-width: 400px;
        padding: 16px;
        border-radius: 8px;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3);
        background: ${colors.bg};
        color: white;
        border: 1px solid ${colors.border};
        transform: translateX(400px);
        opacity: 0;
        transition: all 0.3s ease;
      `;

      const icon = this.getIcon(type);
      const closeBtn = `
        <button
          style="
            margin-left: auto;
            flex-shrink: 0;
            padding: 4px;
            border-radius: 4px;
            background: transparent;
            border: none;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
          "
          onmouseover="this.style.background='rgba(255,255,255,0.1)'"
          onmouseout="this.style.background='transparent'"
          onclick="window.toastManager?.hide('${id}')"
          aria-label="Fechar notificação"
        >
          <svg style="width: 16px; height: 16px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      `;

      toast.innerHTML = `
        ${icon}
        <p style="flex: 1; font-size: 14px; font-weight: 500; margin: 0;">${message}</p>
        ${closeBtn}
      `;

      return toast;
    }

    private getTypeColors(type: Toast['type']): { bg: string; border: string } {
      const colors = {
        success: { bg: 'rgba(34, 197, 94, 0.9)', border: 'rgba(74, 222, 128, 0.5)' },
        error: { bg: 'rgba(239, 68, 68, 0.9)', border: 'rgba(248, 113, 113, 0.5)' },
        warning: { bg: 'rgba(234, 179, 8, 0.9)', border: 'rgba(250, 204, 21, 0.5)' },
        info: { bg: 'rgba(59, 130, 246, 0.9)', border: 'rgba(96, 165, 250, 0.5)' },
      };
      return colors[type] || colors.info;
    }

    private getIcon(type: Toast['type']): string {
      const icons = {
        success: `
          <svg style="width: 20px; height: 20px; flex-shrink: 0;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        `,
        error: `
          <svg style="width: 20px; height: 20px; flex-shrink: 0;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        `,
        warning: `
          <svg style="width: 20px; height: 20px; flex-shrink: 0;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        `,
        info: `
          <svg style="width: 20px; height: 20px; flex-shrink: 0;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        `,
      };
      return icons[type] || icons.info;
    }
  }

  // Inicializar e expor globalmente
  declare global {
    interface Window {
      toastManager: ToastManager;
      showToast: (message: string, type?: Toast['type'], duration?: number) => string;
    }
  }

  window.toastManager = new ToastManager();
  window.showToast = (message, type, duration) => 
    window.toastManager.show(message, type, duration);
</script>
