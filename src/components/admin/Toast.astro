---
// Toast notification component
---

<div
  id="toast-container"
  class="fixed top-4 right-4 z-[100] flex flex-col gap-2"
  aria-live="polite"
>
</div>

<script>
  interface Toast {
    id: string;
    message: string;
    type: 'success' | 'error' | 'warning' | 'info';
  }

  class ToastManager {
    private container: HTMLElement | null;
    private toasts: Map<string, HTMLElement> = new Map();

    constructor() {
      this.container = document.getElementById('toast-container');
    }

    show(message: string, type: Toast['type'] = 'info', duration: number = 5000) {
      if (!this.container) return;

      const id = `toast-${Date.now()}-${Math.random()}`;
      const toast = this.createToastElement(id, message, type);
      
      this.toasts.set(id, toast);
      this.container.appendChild(toast);

      // Animação de entrada
      setTimeout(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
      }, 10);

      // Auto-remover após duração
      if (duration > 0) {
        setTimeout(() => {
          this.hide(id);
        }, duration);
      }

      return id;
    }

    hide(id: string) {
      const toast = this.toasts.get(id);
      if (!toast) return;

      // Animação de saída
      toast.classList.add('translate-x-full', 'opacity-0');
      
      setTimeout(() => {
        toast.remove();
        this.toasts.delete(id);
      }, 300);
    }

    private createToastElement(id: string, message: string, type: Toast['type']): HTMLElement {
      const toast = document.createElement('div');
      toast.id = id;
      toast.className = `
        flex items-center gap-3 min-w-[300px] max-w-md p-4 rounded-lg shadow-lg
        transform transition-all duration-300 translate-x-full opacity-0
        ${this.getTypeClasses(type)}
      `;

      const icon = this.getIcon(type);
      const closeBtn = `
        <button 
          class="ml-auto flex-shrink-0 p-1 rounded-lg hover:bg-white/10 transition"
          onclick="window.toastManager?.hide('${id}')"
          aria-label="Fechar notificação"
        >
          <svg class="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      `;

      toast.innerHTML = `
        ${icon}
        <p class="flex-1 text-sm font-medium">${message}</p>
        ${closeBtn}
      `;

      return toast;
    }

    private getTypeClasses(type: Toast['type']): string {
      const classes = {
        success: 'bg-green-500/90 text-white border border-green-400/50',
        error: 'bg-red-500/90 text-white border border-red-400/50',
        warning: 'bg-yellow-500/90 text-white border border-yellow-400/50',
        info: 'bg-blue-500/90 text-white border border-blue-400/50',
      };
      return classes[type] || classes.info;
    }

    private getIcon(type: Toast['type']): string {
      const icons = {
        success: `
          <svg class="h-5 w-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
        `,
        error: `
          <svg class="h-5 w-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        `,
        warning: `
          <svg class="h-5 w-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        `,
        info: `
          <svg class="h-5 w-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        `,
      };
      return icons[type] || icons.info;
    }
  }

  // Inicializar e expor globalmente
  declare global {
    interface Window {
      toastManager: ToastManager;
      showToast: (message: string, type?: Toast['type'], duration?: number) => string;
    }
  }

  window.toastManager = new ToastManager();
  window.showToast = (message, type, duration) => 
    window.toastManager.show(message, type, duration);
</script>
