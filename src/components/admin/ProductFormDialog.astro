---
interface Props {
  produto?: any;
  categorias: any[];
  onClose?: () => void;
}

const { produto, categorias } = Astro.props;
const isEdit = !!produto;
---

<div
  id="product-dialog"
  class="fixed inset-0 z-50 hidden items-center justify-center bg-black/50 backdrop-blur-sm"
>
  <div class="relative w-full max-w-2xl max-h-[90vh] overflow-y-auto rounded-lg border border-[#2a2a2a] bg-[#0a0a0a] p-6 m-4">
    <!-- Header -->
    <div class="mb-6 flex items-center justify-between">
      <h2 class="text-xl font-bold text-white">
        {isEdit ? 'Editar Produto' : 'Adicionar Produto'}
      </h2>
      <button
        type="button"
        id="close-dialog-btn"
        class="rounded-lg p-2 text-[#a0a0a0] transition hover:bg-[#1a1a1a] hover:text-white"
        aria-label="Fechar"
      >
        <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>

    <!-- Form -->
    <form id="product-form" class="space-y-4">
      <input type="hidden" id="product-id" name="id" value={produto?.id || ''} />

      <!-- Nome -->
      <div>
        <label for="nome" class="block text-sm font-medium text-[#e0e0e0]">
          Nome do Produto *
        </label>
        <input
          type="text"
          id="nome"
          name="nome"
          required
          value={produto?.nome || ''}
          class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          placeholder="iPhone 13 Pro Max"
        />
      </div>

      <!-- Código -->
      <div>
        <label for="codigo" class="block text-sm font-medium text-[#e0e0e0]">
          Código *
        </label>
        <input
          type="text"
          id="codigo"
          name="codigo"
          required
          value={produto?.codigo || ''}
          class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          placeholder="IPH13PM128"
        />
      </div>

      <!-- Grid de 2 colunas -->
      <div class="grid gap-4 md:grid-cols-2">
        <!-- Preço -->
        <div>
          <label for="preco" class="block text-sm font-medium text-[#e0e0e0]">
            Preço (R$) *
          </label>
          <input
            type="number"
            id="preco"
            name="preco"
            required
            step="0.01"
            min="0"
            value={produto?.preco || ''}
            class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
            placeholder="4999.99"
          />
        </div>

        <!-- Bateria -->
        <div>
          <label for="bateria" class="block text-sm font-medium text-[#e0e0e0]">
            Bateria (%)
          </label>
          <input
            type="number"
            id="bateria"
            name="bateria"
            min="0"
            max="100"
            value={produto?.bateria || ''}
            class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
            placeholder="85"
          />
        </div>
      </div>

      <!-- Grid de 2 colunas -->
      <div class="grid gap-4 md:grid-cols-2">
        <!-- Condição -->
        <div>
          <label for="condicao" class="block text-sm font-medium text-[#e0e0e0]">
            Condição *
          </label>
          <select
            id="condicao"
            name="condicao"
            required
            class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          >
            <option value="Novo" selected={produto?.condicao === 'Novo'}>Novo</option>
            <option value="Seminovo" selected={produto?.condicao === 'Seminovo'}>Seminovo</option>
          </select>
        </div>

        <!-- Categoria -->
        <div>
          <label for="categoria_id" class="block text-sm font-medium text-[#e0e0e0]">
            Categoria *
          </label>
          <select
            id="categoria_id"
            name="categoria_id"
            required
            class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          >
            <option value="">Selecione...</option>
            {categorias.map((cat) => (
              <option value={cat.id} selected={produto?.categoria_id === cat.id}>
                {cat.nome}
              </option>
            ))}
          </select>
        </div>
      </div>

      <!-- Descrição -->
      <div>
        <label for="descricao" class="block text-sm font-medium text-[#e0e0e0]">
          Descrição
        </label>
        <textarea
          id="descricao"
          name="descricao"
          rows="3"
          value={produto?.descricao || ''}
          class="mt-1 block w-full rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-3 py-2 text-white placeholder-[#a0a0a0] focus:border-white focus:outline-none focus:ring-1 focus:ring-white"
          placeholder="Descrição detalhada do produto..."
        ></textarea>
      </div>

      <!-- Upload de Imagem -->
      <div>
        <label class="block text-sm font-medium text-[#e0e0e0] mb-2">
          Foto Principal
        </label>
        <div class="flex items-center gap-4">
          {produto?.foto_principal && (
            <img
              id="preview-image"
              src={produto.foto_principal}
              alt="Preview"
              class="h-20 w-20 rounded-lg object-cover border border-[#2a2a2a]"
            />
          )}
          <div class="flex-1">
            <input
              type="file"
              id="foto-upload"
              accept="image/jpeg,image/jpg,image/png,image/webp"
              class="hidden"
            />
            <input type="hidden" id="foto_principal" name="foto_principal" value={produto?.foto_principal || ''} />
            <button
              type="button"
              id="upload-btn"
              class="rounded-lg border border-[#2a2a2a] bg-[#1a1a1a] px-4 py-2 text-sm font-medium text-white transition hover:bg-[#2a2a2a]"
            >
              Escolher Arquivo
            </button>
            <p class="mt-1 text-xs text-[#a0a0a0]">
              JPG, PNG ou WebP. Máximo 5MB.
            </p>
          </div>
        </div>
      </div>

      <!-- Status Ativo -->
      <div class="flex items-center gap-3">
        <input
          type="checkbox"
          id="ativo"
          name="ativo"
          checked={produto?.ativo !== false}
          class="h-4 w-4 rounded border-[#2a2a2a] bg-[#1a1a1a] text-white focus:ring-2 focus:ring-white focus:ring-offset-0"
        />
        <label for="ativo" class="text-sm font-medium text-[#e0e0e0]">
          Produto ativo (visível no catálogo)
        </label>
      </div>

      <!-- Botões -->
      <div class="flex items-center justify-end gap-3 pt-4 border-t border-[#2a2a2a]">
        <button
          type="button"
          id="cancel-btn"
          class="rounded-lg border border-[#2a2a2a] bg-transparent px-4 py-2 text-sm font-medium text-white transition hover:bg-[#1a1a1a]"
        >
          Cancelar
        </button>
        <button
          type="submit"
          id="submit-btn"
          class="rounded-lg bg-white px-4 py-2 text-sm font-medium text-black transition hover:bg-[#e0e0e0] disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isEdit ? 'Salvar Alterações' : 'Adicionar Produto'}
        </button>
      </div>
    </form>
  </div>
</div>

<script>
  const dialog = document.getElementById('product-dialog');
  const form = document.getElementById('product-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const closeBtn = document.getElementById('close-dialog-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  const uploadBtn = document.getElementById('upload-btn');
  const fileInput = document.getElementById('foto-upload') as HTMLInputElement;
  const fotoHidden = document.getElementById('foto_principal') as HTMLInputElement;
  const previewImg = document.getElementById('preview-image') as HTMLImageElement;

  // Abrir dialog
  window.openProductDialog = (produto?: any) => {
    if (produto) {
      // Preencher form com dados do produto
      (document.getElementById('product-id') as HTMLInputElement).value = produto.id || '';
      (document.getElementById('nome') as HTMLInputElement).value = produto.nome || '';
      (document.getElementById('codigo') as HTMLInputElement).value = produto.codigo || '';
      (document.getElementById('preco') as HTMLInputElement).value = produto.preco || '';
      (document.getElementById('bateria') as HTMLInputElement).value = produto.bateria || '';
      (document.getElementById('condicao') as HTMLSelectElement).value = produto.condicao || 'Novo';
      (document.getElementById('categoria_id') as HTMLSelectElement).value = produto.categoria_id || '';
      (document.getElementById('descricao') as HTMLTextAreaElement).value = produto.descricao || '';
      (document.getElementById('ativo') as HTMLInputElement).checked = produto.ativo !== false;
      fotoHidden.value = produto.foto_principal || '';
      
      if (produto.foto_principal && previewImg) {
        previewImg.src = produto.foto_principal;
        previewImg.classList.remove('hidden');
      }
    }
    
    dialog?.classList.remove('hidden');
    dialog?.classList.add('flex');
  };

  // Fechar dialog
  const closeDialog = () => {
    dialog?.classList.add('hidden');
    dialog?.classList.remove('flex');
    form?.reset();
  };

  closeBtn?.addEventListener('click', closeDialog);
  cancelBtn?.addEventListener('click', closeDialog);

  // Upload de imagem
  uploadBtn?.addEventListener('click', () => {
    fileInput?.click();
  });

  fileInput?.addEventListener('change', async (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (!file) return;

    uploadBtn.disabled = true;
    uploadBtn.textContent = 'Enviando...';

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/admin/upload', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao fazer upload');
      }

      // Atualizar preview e campo hidden
      fotoHidden.value = data.url;
      if (previewImg) {
        previewImg.src = data.url;
        previewImg.classList.remove('hidden');
      }

      window.showToast('Imagem enviada com sucesso!', 'success');
    } catch (error: any) {
      window.showToast(error.message || 'Erro ao fazer upload', 'error');
    } finally {
      uploadBtn.disabled = false;
      uploadBtn.textContent = 'Escolher Arquivo';
    }
  });

  // Submit do formulário
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const productId = formData.get('id') as string;
    const isEdit = !!productId;

    // Construir objeto do produto
    const produto: any = {
      nome: formData.get('nome'),
      codigo: formData.get('codigo'),
      preco: parseFloat(formData.get('preco') as string),
      bateria: formData.get('bateria') ? parseInt(formData.get('bateria') as string) : null,
      condicao: formData.get('condicao'),
      categoria_id: formData.get('categoria_id'),
      descricao: formData.get('descricao') || null,
      foto_principal: formData.get('foto_principal') || null,
      ativo: formData.get('ativo') === 'on',
    };

    submitBtn.disabled = true;
    submitBtn.textContent = isEdit ? 'Salvando...' : 'Adicionando...';

    try {
      const url = isEdit ? `/api/admin/produtos/${productId}` : '/api/admin/produtos';
      const method = isEdit ? 'PUT' : 'POST';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(produto),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao salvar produto');
      }

      window.showToast(
        isEdit ? 'Produto atualizado com sucesso!' : 'Produto adicionado com sucesso!',
        'success'
      );

      closeDialog();
      
      // Recarregar página após 1 segundo
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } catch (error: any) {
      window.showToast(error.message || 'Erro ao salvar produto', 'error');
    } finally {
      submitBtn.disabled = false;
      submitBtn.textContent = isEdit ? 'Salvar Alterações' : 'Adicionar Produto';
    }
  });

  // Expor função globalmente
  declare global {
    interface Window {
      openProductDialog: (produto?: any) => void;
    }
  }
</script>
