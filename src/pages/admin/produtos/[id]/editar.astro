---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import { supabaseAdmin } from '../../../../lib/supabaseAdmin';
import '../../../../styles/admin-form.css';

export const prerender = false; // For√ßa SSR sem cache para admin

const { id } = Astro.params;

const { data: produto, error } = await supabaseAdmin
  .from('produtos')
  .select('*')
  .eq('id', id)
  .single();

if (error || !produto) {
  return Astro.redirect('/admin/produtos');
}

const { data: categorias } = await supabaseAdmin
  .from('categorias')
  .select('*')
  .order('nome');
---

<AdminLayout title="Editar Produto" description="Editar produto do cat√°logo">
  <div class="form-page">
    <div class="form-container">
      <div class="form-header">
        <a href="/admin/produtos" class="form-back-btn">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          Voltar para Produtos
        </a>
        <h1 class="form-title">Editar Produto</h1>
        <p class="form-subtitle">Atualize as informa√ß√µes do produto</p>
      </div>

      <div class="form-card">
        <form id="product-form">
          <input
            type="hidden"
            id="produto_id"
            name="produto_id"
            value={produto.id}
          />
          <input
            type="hidden"
            id="foto_principal"
            name="foto_principal"
            value={produto.imagens?.[0] || ''}
          />

          <!-- Image Upload -->
          <div class="form-group">
            <label class="form-label">Imagens do Produto (at√© 5)</label>
            <input
              id="foto-upload"
              type="file"
              accept="image/*"
              multiple
              style="display: none;"
            />
            <div class="form-image-upload" id="upload-area">
              <!-- Conte√∫do din√¢mico: placeholder ou grid de imagens -->
            </div>
            <input type="hidden" id="existing-images" value={JSON.stringify(produto.imagens || [])} />
          </div>

          <!-- Nome -->
          <div class="form-group">
            <label class="form-label" for="nome">
              Nome do Produto
              <span class="form-label-required">*</span>
            </label>
            <input
              id="nome"
              name="nome"
              type="text"
              class="form-input"
              placeholder="Ex: iPhone 13 Pro Max 256GB"
              value={produto.nome}
              required
            />
          </div>

          <!-- C√≥digo e Pre√ßo -->
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="codigo">C√≥digo</label>
              <input
                id="codigo"
                name="codigo"
                type="text"
                class="form-input"
                placeholder="Ex: IP13PM256"
                value={produto.codigo || ''}
              />
            </div>
            <div class="form-group">
              <label class="form-label" for="preco">
                Pre√ßo
                <span class="form-label-required">*</span>
              </label>
              <input
                id="preco"
                name="preco"
                type="number"
                step="0.01"
                class="form-input"
                placeholder="0.00"
                value={produto.preco}
                required
              />
            </div>
          </div>

          <!-- Categoria e Condi√ß√£o -->
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="categoria_id">
                Categoria
                <span class="form-label-required">*</span>
              </label>
              <select
                id="categoria_id"
                name="categoria_id"
                class="form-select"
                required
              >
                <option value="">Selecione uma categoria</option>
                {
                  categorias?.map((categoria) => (
                    <option
                      value={categoria.id}
                      selected={categoria.id === produto.categoria_id}
                    >
                      {categoria.nome}
                    </option>
                  ))
                }
              </select>
            </div>
            <div class="form-group">
              <label class="form-label" for="condicao">Condi√ß√£o</label>
              <select id="condicao" name="condicao" class="form-select">
                <option value="Novo" selected={produto.condicao === 'Novo'}
                  >Novo</option
                >
                <option
                  value="Semi-novo"
                  selected={produto.condicao === 'Semi-novo'}>Semi-novo</option
                >
                <option value="Usado" selected={produto.condicao === 'Usado'}
                  >Usado</option
                >
              </select>
            </div>
          </div>

          <!-- Bateria -->
          <div class="form-group">
            <label class="form-label" for="bateria">Bateria (mAh)</label>
            <input
              id="bateria"
              name="bateria"
              type="number"
              class="form-input"
              placeholder="Ex: 4352"
              value={produto.bateria || ''}
            />
          </div>

          <!-- Descri√ß√£o -->
          <div class="form-group">
            <label class="form-label" for="descricao">Descri√ß√£o</label>
            <textarea
              id="descricao"
              name="descricao"
              class="form-textarea"
              placeholder="Descreva o produto, suas caracter√≠sticas e estado..."
              >{produto.descricao || ''}</textarea
            >
          </div>

          <!-- Actions -->
          <div class="form-actions">
            <a href="/admin/produtos" class="form-btn form-btn-cancel"
              >Cancelar</a
            >
            <button
              type="submit"
              id="submit-btn"
              class="form-btn form-btn-submit"
            >
              <span id="submit-text">Salvar Altera√ß√µes</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  const form = document.getElementById('product-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const submitText = document.getElementById('submit-text') as HTMLSpanElement;
  const produtoIdInput = document.getElementById('produto_id') as HTMLInputElement;
  const fileInput = document.getElementById('foto-upload') as HTMLInputElement;
  const uploadArea = document.getElementById('upload-area');
  const existingImagesInput = document.getElementById('existing-images') as HTMLInputElement;

  // Estado de imagens
  interface ImageItem {
    url: string;
    path?: string; // Apenas para novas imagens (para poder deletar)
    isExisting: boolean; // true = j√° existia no produto, false = nova upload
  }

  let images: ImageItem[] = [];
  const MAX_IMAGES = 5;
  let formSaved = false;

  // Carregar imagens existentes do produto
  try {
    const existingUrls = JSON.parse(existingImagesInput.value || '[]');
    images = existingUrls.map((url: string) => ({
      url,
      isExisting: true,
    }));
  } catch (e) {
    console.error('Erro ao parsear imagens existentes:', e);
  }

  // Click na √°rea de upload abre o file input
  uploadArea?.addEventListener('click', (e) => {
    if ((e.target as HTMLElement).closest('button')) return;

    if (images.length < MAX_IMAGES) {
      fileInput?.click();
    } else {
      window.showToast(`M√°ximo de ${MAX_IMAGES} imagens permitido`, 'warning');
    }
  });

  // Fun√ß√£o para fazer upload de uma imagem
  async function uploadImage(file: File): Promise<ImageItem | null> {
    try {
      if (file.size > 10 * 1024 * 1024) {
        window.showToast('Imagem muito grande (m√°x 10MB)', 'error');
        return null;
      }

      if (!file.type.startsWith('image/')) {
        window.showToast('Arquivo deve ser uma imagem', 'error');
        return null;
      }

      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/admin/upload', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Erro ao fazer upload');
      }

      const result = await response.json();

      if (result.savings) {
        console.log(`‚úÖ Imagem otimizada: ${result.savings} de redu√ß√£o`);
      }

      return {
        url: result.url,
        path: result.path,
        isExisting: false, // Nova imagem
      };
    } catch (error: any) {
      console.error('Erro ao fazer upload:', error);
      window.showToast(error.message || 'Erro ao fazer upload', 'error');
      return null;
    }
  }

  // Fun√ß√£o para deletar imagem do storage
  async function deleteImage(path: string): Promise<boolean> {
    try {
      const response = await fetch('/api/admin/upload', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ path }),
      });

      if (!response.ok) {
        throw new Error('Erro ao deletar imagem');
      }

      return true;
    } catch (error: any) {
      console.error('Erro ao deletar imagem:', error);
      return false;
    }
  }

  // Limpar imagens novas tempor√°rias
  async function cleanupTemporaryImages() {
    if (formSaved) return;

    const newImages = images.filter((img) => !img.isExisting && img.path);

    if (newImages.length === 0) return;

    console.log('üßπ Limpando imagens tempor√°rias...');

    const deletePromises = newImages.map((img) => deleteImage(img.path!));
    await Promise.all(deletePromises);

    console.log(`‚úÖ ${newImages.length} imagem(ns) removida(s) do storage`);
  }

  // Limpar imagens ao sair da p√°gina sem salvar
  window.addEventListener('beforeunload', () => {
    if (!formSaved) {
      const newImages = images.filter((img) => !img.isExisting && img.path);
      if (newImages.length > 0) {
        const paths = newImages.map((img) => img.path!);
        navigator.sendBeacon(
          '/api/admin/upload',
          new Blob([JSON.stringify({ paths })], { type: 'application/json' })
        );
      }
    }
  });

  // Limpar ao clicar no bot√£o Voltar
  document.querySelectorAll('.form-back-btn, .form-btn-cancel').forEach((btn) => {
    btn.addEventListener('click', async (e) => {
      const newImages = images.filter((img) => !img.isExisting && img.path);
      if (!formSaved && newImages.length > 0) {
        e.preventDefault();
        await cleanupTemporaryImages();
        window.location.href = '/admin/produtos';
      }
    });
  });

  // Renderizar preview das imagens
  function renderImagesPreviews() {
    if (!uploadArea) return;

    if (images.length === 0) {
      uploadArea.innerHTML = `
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; padding: 48px 24px;">
          <svg
            style="width: 48px; height: 48px; color: #9ca3af; margin-bottom: 16px;"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
            ></path>
          </svg>
          <p style="font-size: 14px; font-weight: 500; color: #6b7280; margin-bottom: 4px;">
            Clique para adicionar imagens
          </p>
          <small style="font-size: 12px; color: #9ca3af;">JPG, PNG at√© 10MB cada (m√°ximo 5 imagens)</small>
        </div>
      `;
      return;
    }

    const imagesHtml = images
      .map(
        (img, index) => `
        <div style="position: relative; aspect-ratio: 1; border-radius: 8px; overflow: hidden; border: 2px solid #e5e7eb; background: #f9fafb;">
          <img src="${img.url}" alt="Preview ${index + 1}" style="width: 100%; height: 100%; object-fit: cover;" />
          <button
            type="button"
            onclick="window.removeImage(${index})"
            style="position: absolute; top: 4px; right: 4px; background: rgba(239, 68, 68, 0.9); color: white; border: none; border-radius: 50%; width: 28px; height: 28px; display: flex; align-items: center; justify-content: center; cursor: pointer; font-size: 18px; font-weight: bold; transition: all 0.2s;"
            onmouseover="this.style.background='rgba(220, 38, 38, 1)'; this.style.transform='scale(1.1)'"
            onmouseout="this.style.background='rgba(239, 68, 68, 0.9)'; this.style.transform='scale(1)'"
            title="Remover imagem"
          >
            √ó
          </button>
          ${index === 0 ? '<span style="position: absolute; bottom: 6px; left: 6px; background: rgba(0,0,0,0.8); color: white; font-size: 11px; padding: 4px 8px; border-radius: 4px; font-weight: 500;">Principal</span>' : ''}
          ${!img.isExisting ? '<span style="position: absolute; top: 6px; left: 6px; background: rgba(34, 197, 94, 0.9); color: white; font-size: 10px; padding: 3px 6px; border-radius: 4px; font-weight: 500;">Nova</span>' : ''}
        </div>
      `,
      )
      .join('');

    const addButtonHtml =
      images.length < MAX_IMAGES
        ? `
        <div
          style="
            aspect-ratio: 1;
            border-radius: 8px;
            border: 2px dashed #d1d5db;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            background: #f9fafb;
            transition: all 0.2s;
          "
          onmouseover="this.style.borderColor='#9ca3af'; this.style.background='#f3f4f6'"
          onmouseout="this.style.borderColor='#d1d5db'; this.style.background='#f9fafb'"
        >
          <svg style="width: 32px; height: 32px; color: #9ca3af; margin-bottom: 4px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
          </svg>
          <span style="font-size: 12px; color: #6b7280; font-weight: 500;">Adicionar</span>
        </div>
      `
        : '';

    uploadArea.innerHTML = `
      <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 12px; padding: 16px;">
        ${imagesHtml}
        ${addButtonHtml}
      </div>
    `;
  }

  // Fun√ß√£o global para remover imagem
  (window as any).removeImage = async (index: number) => {
    const imageToRemove = images[index];

    // Se for nova imagem, deletar do storage
    if (!imageToRemove.isExisting && imageToRemove.path) {
      await deleteImage(imageToRemove.path);
    }

    images.splice(index, 1);
    renderImagesPreviews();
    window.showToast('Imagem removida', 'success');
  };

  // Quando selecionar arquivos
  fileInput?.addEventListener('change', async (e) => {
    const files = (e.target as HTMLInputElement).files;
    if (!files || files.length === 0) return;

    const remainingSlots = MAX_IMAGES - images.length;
    if (files.length > remainingSlots) {
      window.showToast(
        `Voc√™ pode adicionar apenas ${remainingSlots} imagem${remainingSlots !== 1 ? 'ns' : ''} (m√°ximo ${MAX_IMAGES})`,
        'warning',
      );
    }

    const filesToUpload = Array.from(files).slice(0, remainingSlots);

    window.showToast('Fazendo upload das imagens...', 'info');

    const uploadPromises = filesToUpload.map((file) => uploadImage(file));
    const results = await Promise.all(uploadPromises);

    const validImages = results.filter((img): img is ImageItem => img !== null);
    images.push(...validImages);

    renderImagesPreviews();

    if (validImages.length > 0) {
      window.showToast(
        `${validImages.length} imagem${validImages.length !== 1 ? 'ns' : ''} carregada${validImages.length !== 1 ? 's' : ''}!`,
        'success',
      );
    }

    fileInput.value = '';
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);

    const produto = {
      nome: formData.get('nome'),
      codigo: formData.get('codigo'),
      preco: parseFloat(formData.get('preco') as string),
      bateria: formData.get('bateria')
        ? parseInt(formData.get('bateria') as string)
        : null,
      condicao: formData.get('condicao'),
      categoria_id: formData.get('categoria_id'),
      descricao: formData.get('descricao') || null,
      imagens: images.map((img) => img.url),
    };

    const produtoId = produtoIdInput.value;
    submitBtn.disabled = true;
    submitText.innerHTML = '<div class="form-spinner"></div> Salvando...';

    try {
      const response = await fetch(`/api/admin/produtos/${produtoId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(produto),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao atualizar produto');
      }

      formSaved = true; // Prevenir limpeza de imagens

      window.showToast('Produto atualizado com sucesso!', 'success');

      if ('caches' in window) {
        caches.keys().then((names) => {
          names.forEach((name) => caches.delete(name));
        });
      }

      setTimeout(() => {
        window.location.href = '/admin/produtos?updated=' + Date.now();
      }, 1000);
    } catch (error: any) {
      console.error('Erro ao salvar produto:', error);
      window.showToast(error.message || 'Erro ao salvar produto', 'error');
    } finally {
      submitBtn.disabled = false;
      submitText.textContent = 'Salvar Altera√ß√µes';
    }
  });

  // Renderizar estado inicial
  renderImagesPreviews();
</script>
