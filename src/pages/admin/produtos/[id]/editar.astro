---
import AdminLayout from '../../../../layouts/AdminLayout.astro';
import { supabaseAdmin } from '../../../../lib/supabaseAdmin';
import '../../../../styles/admin-form.css';

export const prerender = false; // Força SSR sem cache para admin

const { id } = Astro.params;

const { data: produto, error } = await supabaseAdmin
  .from('produtos')
  .select('*')
  .eq('id', id)
  .single();

if (error || !produto) {
  return Astro.redirect('/admin/produtos');
}

const { data: categorias } = await supabaseAdmin
  .from('categorias')
  .select('*')
  .order('nome');
---

<AdminLayout title="Editar Produto" description="Editar produto do catálogo">
  <div class="form-page">
    <div class="form-container">
      <div class="form-header">
        <a href="/admin/produtos" class="form-back-btn">
          <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"></path>
          </svg>
          Voltar para Produtos
        </a>
        <h1 class="form-title">Editar Produto</h1>
        <p class="form-subtitle">Atualize as informações do produto</p>
      </div>

      <div class="form-card">
        <form id="product-form">
          <input
            type="hidden"
            id="produto_id"
            name="produto_id"
            value={produto.id}
          />
          <input
            type="hidden"
            id="foto_principal"
            name="foto_principal"
            value={produto.imagens?.[0] || ''}
          />

          <!-- Image Upload -->
          <div class="form-group">
            <label class="form-label">Imagem do Produto</label>
            <input
              id="foto-upload"
              type="file"
              accept="image/*"
              style="display: none;"
            />
            <div class="form-image-upload" id="upload-area">
              <div id="upload-placeholder">
                <svg
                  class="form-image-upload-icon"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                  ></path>
                </svg>
                <p class="form-image-upload-text">
                  Clique para adicionar imagem
                </p>
                <small class="form-image-upload-hint">JPG, PNG até 5MB</small>
              </div>
              <img
                id="preview-image"
                class="form-image-preview"
                style={produto.imagens?.[0]
                  ? 'display: block;'
                  : 'display: none;'}
                src={produto.imagens?.[0] || ''}
                alt="Preview"
              />
              <button
                type="button"
                id="remove-image-btn"
                class="form-image-remove"
                style={produto.imagens?.[0]
                  ? 'display: flex;'
                  : 'display: none;'}
              >
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Nome -->
          <div class="form-group">
            <label class="form-label" for="nome">
              Nome do Produto
              <span class="form-label-required">*</span>
            </label>
            <input
              id="nome"
              name="nome"
              type="text"
              class="form-input"
              placeholder="Ex: iPhone 13 Pro Max 256GB"
              value={produto.nome}
              required
            />
          </div>

          <!-- Código e Preço -->
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="codigo">Código</label>
              <input
                id="codigo"
                name="codigo"
                type="text"
                class="form-input"
                placeholder="Ex: IP13PM256"
                value={produto.codigo || ''}
              />
            </div>
            <div class="form-group">
              <label class="form-label" for="preco">
                Preço
                <span class="form-label-required">*</span>
              </label>
              <input
                id="preco"
                name="preco"
                type="number"
                step="0.01"
                class="form-input"
                placeholder="0.00"
                value={produto.preco}
                required
              />
            </div>
          </div>

          <!-- Categoria e Condição -->
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="categoria_id">
                Categoria
                <span class="form-label-required">*</span>
              </label>
              <select
                id="categoria_id"
                name="categoria_id"
                class="form-select"
                required
              >
                <option value="">Selecione uma categoria</option>
                {
                  categorias?.map((categoria) => (
                    <option
                      value={categoria.id}
                      selected={categoria.id === produto.categoria_id}
                    >
                      {categoria.nome}
                    </option>
                  ))
                }
              </select>
            </div>
            <div class="form-group">
              <label class="form-label" for="condicao">Condição</label>
              <select id="condicao" name="condicao" class="form-select">
                <option value="Novo" selected={produto.condicao === 'Novo'}
                  >Novo</option
                >
                <option
                  value="Semi-novo"
                  selected={produto.condicao === 'Semi-novo'}>Semi-novo</option
                >
                <option value="Usado" selected={produto.condicao === 'Usado'}
                  >Usado</option
                >
              </select>
            </div>
          </div>

          <!-- Bateria -->
          <div class="form-group">
            <label class="form-label" for="bateria">Bateria (mAh)</label>
            <input
              id="bateria"
              name="bateria"
              type="number"
              class="form-input"
              placeholder="Ex: 4352"
              value={produto.bateria || ''}
            />
          </div>

          <!-- Descrição -->
          <div class="form-group">
            <label class="form-label" for="descricao">Descrição</label>
            <textarea
              id="descricao"
              name="descricao"
              class="form-textarea"
              placeholder="Descreva o produto, suas características e estado..."
              >{produto.descricao || ''}</textarea
            >
          </div>

          <!-- Actions -->
          <div class="form-actions">
            <a href="/admin/produtos" class="form-btn form-btn-cancel"
              >Cancelar</a
            >
            <button
              type="submit"
              id="submit-btn"
              class="form-btn form-btn-submit"
            >
              <span id="submit-text">Salvar Alterações</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  const form = document.getElementById('product-form') as HTMLFormElement;
  const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
  const submitText = document.getElementById('submit-text') as HTMLSpanElement;
  const produtoIdInput = document.getElementById(
    'produto_id',
  ) as HTMLInputElement;
  const fileInput = document.getElementById('foto-upload') as HTMLInputElement;
  const fotoHidden = document.getElementById(
    'foto_principal',
  ) as HTMLInputElement;
  const previewImg = document.getElementById(
    'preview-image',
  ) as HTMLImageElement;
  const uploadArea = document.getElementById('upload-area');
  const uploadPlaceholder = document.getElementById('upload-placeholder');
  const removeImageBtn = document.getElementById('remove-image-btn');

  uploadArea?.addEventListener('click', () => fileInput?.click());

  removeImageBtn?.addEventListener('click', (e) => {
    e.stopPropagation();
    if (fotoHidden) fotoHidden.value = '';
    if (previewImg) {
      previewImg.style.display = 'none';
      previewImg.src = '';
    }
    if (uploadPlaceholder) uploadPlaceholder.style.display = 'flex';
    if (removeImageBtn) removeImageBtn.style.display = 'none';
    if (fileInput) fileInput.value = '';
  });

  fileInput?.addEventListener('change', async (e) => {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (!file) return;

    if (uploadPlaceholder) {
      uploadPlaceholder.innerHTML =
        '<div class="form-spinner"></div><p class="form-image-upload-text">Enviando...</p>';
    }

    try {
      const formData = new FormData();
      formData.append('file', file);

      const response = await fetch('/api/admin/upload', {
        method: 'POST',
        body: formData,
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao fazer upload');
      }

      fotoHidden.value = data.url;
      previewImg.src = data.url;
      previewImg.style.display = 'block';
      if (uploadPlaceholder) uploadPlaceholder.style.display = 'none';
      if (removeImageBtn) removeImageBtn.style.display = 'flex';

      window.showToast('Imagem enviada com sucesso!', 'success');
    } catch (error: any) {
      console.error('Erro ao fazer upload:', error);
      window.showToast(error.message || 'Erro ao fazer upload', 'error');

      if (uploadPlaceholder) {
        uploadPlaceholder.innerHTML = `
          <svg class="form-image-upload-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <p class="form-image-upload-text">Clique para adicionar imagem</p>
          <small class="form-image-upload-hint">JPG, PNG até 5MB</small>
        `;
      }
    }
  });

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const fotoPrincipal = formData.get('foto_principal') as string;

    const produto = {
      nome: formData.get('nome'),
      codigo: formData.get('codigo'),
      preco: parseFloat(formData.get('preco') as string),
      bateria: formData.get('bateria')
        ? parseInt(formData.get('bateria') as string)
        : null,
      condicao: formData.get('condicao'),
      categoria_id: formData.get('categoria_id'),
      descricao: formData.get('descricao') || null,
      imagens: fotoPrincipal ? [fotoPrincipal] : [],
    };

    const produtoId = produtoIdInput.value;
    submitBtn.disabled = true;
    submitText.innerHTML = '<div class="form-spinner"></div> Salvando...';

    try {
      const response = await fetch(`/api/admin/produtos/${produtoId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(produto),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao atualizar produto');
      }

      window.showToast('Produto atualizado com sucesso!', 'success');
      
      // Forçar limpeza de cache do navegador
      if ('caches' in window) {
        caches.keys().then((names) => {
          names.forEach((name) => caches.delete(name));
        });
      }
      
      setTimeout(() => {
        // Redirecionar com parâmetro para forçar refresh
        window.location.href = '/admin/produtos?updated=' + Date.now();
      }, 1000);
    } catch (error: any) {
      console.error('Erro ao salvar produto:', error);
      window.showToast(error.message || 'Erro ao salvar produto', 'error');
    } finally {
      submitBtn.disabled = false;
      submitText.textContent = 'Salvar Alterações';
    }
  });

  // Show/hide upload placeholder based on initial image
  if (previewImg.src && uploadPlaceholder) {
    uploadPlaceholder.style.display = 'none';
  }
</script>
