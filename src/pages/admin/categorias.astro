---
declare global {
  interface Window {
    criarCategoria: typeof criarCategoria;
    editarCategoria: typeof editarCategoria;
    deletarCategoria: typeof deletarCategoria;
    getCategorias: typeof getCategorias;
  }
}
import AdminLayout from '../../layouts/AdminLayout.astro';
import ConfirmModal from '../../components/admin/ConfirmModal.astro';
import '../../styles/admin-list.css';
import '../../styles/admin-form.css';
---

<AdminLayout title="Categorias">
  <div class="admin-list-container">
    <div class="admin-list-header">
      <div class="admin-list-title-group">
        <h1 class="admin-list-title">Categorias</h1>
        <p class="admin-list-subtitle">Organize seus produtos por categorias</p>
      </div>
    </div>

    <!-- Form Card -->
    <div class="form-card" style="margin-bottom: 24px;">
      <form
        id="category-form"
        style="display: flex; gap: 12px; align-items: flex-end;"
      >
        <input type="hidden" id="edit-category-id" />
        <div class="form-group" style="flex: 1; margin: 0;">
          <label class="form-label" for="category-name">
            Nome da Categoria
            <span class="form-label-required">*</span>
          </label>
          <input
            id="category-name"
            type="text"
            class="form-input"
            placeholder="Ex: iPhones, Acessórios..."
            required
          />
        </div>
        <button
          type="submit"
          id="submit-category-btn"
          class="form-btn form-btn-submit"
          style="flex-shrink: 0;"
        >
          <span id="submit-category-text">Adicionar</span>
        </button>
        <button
          type="button"
          id="cancel-edit-btn"
          class="form-btn form-btn-cancel hidden"
          style="flex-shrink: 0;"
        >
          Cancelar
        </button>
      </form>
    </div>

    <div id="category-list-root"></div>
  </div>

  <ConfirmModal />
</AdminLayout>

<script src="/js/categorias-client.js"></script>

<script is:inline>
  const form = document.getElementById('category-form');
  const nameInput = document.getElementById('category-name');
  const editIdInput = document.getElementById('edit-category-id');
  const submitBtn = document.getElementById('submit-category-btn');
  const submitText = document.getElementById('submit-category-text');
  const cancelBtn = document.getElementById('cancel-edit-btn');
  const listRoot = document.getElementById('category-list-root');

  // Helper: fetch categories and count products
  async function listarCategoriasComContagem() {
    const res = await window.getCategorias();
    if (!res || !res.success || !Array.isArray(res.data)) return [];
    return res.data;
  }

  // Render category list
  async function renderCategoryList() {
    listRoot.innerHTML = '<div class="admin-list-loading">Carregando...</div>';
    try {
      const categorias = await listarCategoriasComContagem();
      if (!categorias || categorias.length === 0) {
        listRoot.innerHTML = `<div class="admin-empty-state">
          <div class="admin-empty-state-icon">
            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/></svg>
          </div>
          <h3 class="admin-empty-state-title">Nenhuma categoria criada</h3>
          <p class="admin-empty-state-text">Use o formulário acima para criar sua primeira categoria</p>
        </div>`;
        return;
      }
      listRoot.innerHTML = `<div class="admin-list-items">
        ${categorias
          .map(
            (cat) => `
          <div class="admin-list-item">
            <div class="admin-list-item-image placeholder">
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"/></svg>
            </div>
            <div class="admin-list-item-content">
              <h3 class="admin-list-item-title">${cat.nome}</h3>
              <div class="admin-list-item-meta">
                <span class="admin-list-item-badge">
                  <svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/></svg>
                  ${cat.produtos_count || 0} produto${cat.produtos_count !== 1 ? 's' : ''}
                </span>
              </div>
            </div>
            <div class="admin-list-item-actions">
              <button class="admin-list-item-btn" data-action="edit" data-cat='${JSON.stringify(cat)}' title="Editar categoria">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"/></svg>
              </button>
              <button class="admin-list-item-btn danger" data-action="delete" data-id="${cat.id}" data-nome="${cat.nome}" title="Deletar categoria">
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/></svg>
              </button>
            </div>
          </div>
        `,
          )
          .join('')}
      </div>`;
      // Re-bind edit/delete events
      bindListEvents();
    } catch (err) {
      listRoot.innerHTML =
        '<div class="admin-list-error">Erro ao carregar categorias</div>';
    }
  }

  function bindListEvents() {
    document.querySelectorAll('[data-action="edit"]').forEach((btn) => {
      btn.addEventListener('click', (e) => {
        const cat = JSON.parse(btn.dataset.cat || '{}');
        nameInput.value = cat.nome;
        editIdInput.value = cat.id;
        submitText.textContent = 'Salvar';
        cancelBtn.classList.remove('hidden');
        nameInput.focus();
      });
    });
    document.querySelectorAll('[data-action="delete"]').forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        const el = btn;
        const id = el.dataset.id;
        const nome = el.dataset.nome;
        if (!id) return;
        const confirmed = await window.confirmModal.show(
          'Deletar Categoria',
          `Tem certeza que deseja deletar "${nome}"? Esta ação não pode ser desfeita.`,
        );
        if (confirmed) {
          const result = await window.deletarCategoria(id);
          if (result.success) {
            window.showToast('Categoria deletada!', 'success');
            renderCategoryList();
          } else {
            window.showToast(result.error || 'Erro ao deletar', 'error');
          }
        }
      });
    });
  }

  // Submit form
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const nome = nameInput.value.trim();
    const editId = editIdInput.value;
    const isEdit = !!editId;
    if (!nome) return;
    submitBtn.disabled = true;
    submitText.textContent = isEdit ? 'Salvando...' : 'Adicionando...';
    try {
      const result = isEdit
        ? await window.editarCategoria(editId, nome)
        : await window.criarCategoria(nome);
      if (!result.success) {
        throw new Error(result.error);
      }
      window.showToast(
        isEdit ? 'Categoria atualizada!' : 'Categoria criada!',
        'success',
      );
      form.reset();
      editIdInput.value = '';
      cancelBtn.classList.add('hidden');
      submitText.textContent = 'Adicionar';
      renderCategoryList();
    } catch (error) {
      window.showToast(error.message || 'Erro ao salvar', 'error');
    } finally {
      submitBtn.disabled = false;
      submitText.textContent = isEdit ? 'Salvar' : 'Adicionar';
    }
  });

  // Cancel edit
  cancelBtn?.addEventListener('click', () => {
    form.reset();
    editIdInput.value = '';
    cancelBtn.classList.add('hidden');
    submitText.textContent = 'Adicionar';
  });

  // Initial render
  renderCategoryList();
</script>
