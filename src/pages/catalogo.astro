---
// src/pages/catalogo.astro
// CRITICAL: SSR puro - sempre busca dados frescos
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import Toast from '../components/admin/Toast.astro';

import SearchBar from '../components/catalog/SearchBar.astro';
import EmptyState from '../components/catalog/EmptyState.astro';
import LoadingSpinner from '../components/catalog/LoadingSpinner.astro';
import ViewModeSwitcher from '../components/catalog/ViewModeSwitcher.astro';
import CategoryFilters from '../components/catalog/CategoryFilters.astro';
import ProductCardSkeleton from '../components/catalog/ProductCardSkeleton.astro';

import '../styles/catalog/variables.css';
import '../styles/pages/catalogo.css';
import '../styles/catalog/grid.css';
import '../styles/catalog/card.css';
import '../styles/catalog/animations.css';
import '../styles/admin.css';

import { productService, categoryService } from '../lib/supabase';

// CRITICAL: Desabilitar cache - sempre buscar dados frescos
Astro.response.headers.set(
  'Cache-Control',
  'no-cache, no-store, must-revalidate',
);
Astro.response.headers.set('Pragma', 'no-cache');
Astro.response.headers.set('Expires', '0');

// Buscar dados frescos sempre
const produtosIniciais = await productService.getPaginated(undefined, 30);
const categorias = await categoryService.getAll();

console.log('📊 SSR Catalogo:', {
  produtos: produtosIniciais.produtos?.length || 0,
  categorias: categorias?.length || 0,
  timestamp: new Date().toISOString(),
});

const metaDescription =
  'Explore nossa coleção exclusiva de iPhones novos e seminovos com garantia.';
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<Layout title="Catálogo | Sr. IPHONE" description={metaDescription}>
  <fragment slot="head">
    <link rel="canonical" href={canonicalURL} />
    <meta property="og:title" content="Catálogo Exclusivo | Sr. IPHONE" />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta name="robots" content="index, follow" />
  </fragment>

  <Header />

  <main class="catalogo-page">
    <section class="hero-catalogo">
      <div class="container">
        <div class="hero-content">
          <picture>
            <source srcset="/images/Barbudo.webp" type="image/webp" />
            <img
              src="/images/Barbudo.webp"
              alt="Banner catálogo"
              fetchpriority="high"
              decoding="async"
            />
          </picture>
          <span class="eyebrow">NOSSA COLEÇÃO</span>
          <h1>Catálogo Exclusivo</h1>
          <p>
            iPhones novos e seminovos selecionados com garantia e qualidade
            certificada
          </p>
        </div>
      </div>
    </section>

    <section class="filtros-section">
      <div class="container">
        <SearchBar />

        <div class="filtros-container">
          <div class="categoria-filtros desktop-only">
            <CategoryFilters categorias={categorias} categoriaAtiva="todos" />
          </div>

          <select id="categoria-select" class="categoria-select mobile-only">
            <option value="todos">Todos</option>
            {
              categorias.map((cat) => (
                <option value={cat.id}>{cat.nome}</option>
              ))
            }
          </select>

          <button class="toggle-filtros" id="toggle-filtros">
            <svg
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M3 4H21M3 12H21M3 20H21"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"></path>
            </svg>
            Mais Filtros
          </button>

          <div class="filtros-avancados" id="filtros-avancados">
            <div class="filtro-group">
              <label>Condição</label>
              <select id="filtro-condicao">
                <option value="">Todas</option>
                <option value="Novo">Novo</option>
                <option value="Seminovo">Seminovo</option>
              </select>
            </div>

            <div class="filtro-group">
              <label>Bateria Mínima</label>
              <select id="filtro-bateria">
                <option value="0">Qualquer</option>
                <option value="80">80%+</option>
                <option value="90">90%+</option>
                <option value="95">95%+</option>
              </select>
            </div>

            <div class="filtro-group">
              <label>Ordenar Por</label>
              <select id="filtro-ordenacao">
                <option value="recente">Mais Recentes</option>
                <option value="preco-asc">Menor Preço</option>
                <option value="preco-desc">Maior Preço</option>
                <option value="bateria">Melhor Bateria</option>
              </select>
            </div>

            <button class="btn-limpar-filtros" id="btn-limpar-filtros">
              Limpar Filtros
            </button>
          </div>

          <div class="visualizacao-container">
            <span>Modos de Visualização</span>
            <ViewModeSwitcher />
          </div>
        </div>
      </div>
    </section>

    <section class="produtos-section">
      <div class="container">
        <div id="produtos-skeleton" style="display: none;">
          <div class="produtos-grid grade">
            <ProductCardSkeleton />
            <ProductCardSkeleton />
            <ProductCardSkeleton />
            <ProductCardSkeleton />
            <ProductCardSkeleton />
            <ProductCardSkeleton />
          </div>
        </div>

        <LoadingSpinner />
        <div id="produtos-container"></div>

        <div id="loading-more" class="loading-more" style="display: none;">
          <div class="spinner-small"></div>
          <p>Carregando mais produtos...</p>
        </div>

        <div id="scroll-sentinel" style="height: 1px;"></div>
        <EmptyState />
      </div>
    </section>

    <script
      type="application/json"
      id="initial-data"
      set:html={JSON.stringify({
        produtos: produtosIniciais.produtos,
        nextCursor: produtosIniciais.nextCursor,
        categorias: categorias,
        timestamp: Date.now(),
      })}
    />

    <Footer />
  </main>

  <Toast />
</Layout>

<script>
  import { authService } from '../lib/supabase';
  import {
    initState,
    getState,
    updateState,
    updateFiltros,
  } from '../lib/catalog/core/state';
  import { CATALOG_CONFIG } from '../lib/catalog/core/config';
  import {
    filtrarProdutos,
    ordenarProdutos,
    agruparPorCategoria,
  } from '../lib/catalog/logic';
  import { renderer } from '../lib/catalog/render/renderer';
  import { templates } from '../lib/catalog/render/templates';
  import { createHandlers } from '../lib/catalog/ui/handlers';
  import { catalogEvents, onEvent, emitEvent } from '../lib/catalog/ui/events';
  import { imageLoader } from '../lib/catalog/performance/imageLoader';
  import { metrics } from '../lib/catalog/performance/metrics';
  import { utils, getBateriaColor } from '../lib/catalog/utils';

  // Carregar dados iniciais
  const initialDataEl = document.getElementById('initial-data');
  const initialData = initialDataEl
    ? JSON.parse(initialDataEl.innerHTML || initialDataEl.textContent || '{}')
    : {};

  console.log('🚀 Inicializando catálogo com dados:', {
    produtos: initialData.produtos?.length || 0,
    timestamp: new Date(initialData.timestamp).toISOString(),
  });

  // Inicializar estado
  const state = initState(initialData);

  if (CATALOG_CONFIG.performance.enableWebVitals) {
    metrics.enableWebVitals();
  }

  // Elementos DOM
  const elementos = {
    searchInput: document.getElementById('search-input') as HTMLInputElement,
    toggleFiltros: document.getElementById('toggle-filtros'),
    filtrosAvancados: document.getElementById('filtros-avancados'),
    btnLimparFiltros: document.getElementById('btn-limpar-filtros'),
    produtosContainer: document.getElementById('produtos-container'),
    produtosSkeleton: document.getElementById('produtos-skeleton'),
    loading: document.getElementById('loading'),
    loadingMore: document.getElementById('loading-more'),
    scrollSentinel: document.getElementById('scroll-sentinel'),
    emptyState: document.getElementById('empty-state'),
    filtroCondicao: document.getElementById(
      'filtro-condicao',
    ) as HTMLSelectElement,
    filtroBateria: document.getElementById(
      'filtro-bateria',
    ) as HTMLSelectElement,
    filtroOrdenacao: document.getElementById(
      'filtro-ordenacao',
    ) as HTMLSelectElement,
    categoriaSelect: document.getElementById(
      'categoria-select',
    ) as HTMLSelectElement,
    categoriaBtns: document.querySelectorAll('.categoria-btn'),
    viewModeBtns: document.querySelectorAll('.view-btn'),
  };

  // Handlers modulares
  const handlers = createHandlers(elementos);

  // ==================== Ordenação de Categorias ====================
  function ordenarCategorias(categorias: any[]) {
    const ordem: { [key: string]: number } = {
      todos: 0,
      'iphone 4': 1,
      'iphone 4s': 2,
      'iphone 5': 3,
      'iphone 5c': 4,
      'iphone 5s': 5,
      'iphone 6': 6,
      'iphone 6 plus': 7,
      'iphone 6s': 8,
      'iphone 6s plus': 9,
      'iphone 7': 10,
      'iphone 7 plus': 11,
      'iphone 8': 12,
      'iphone 8 plus': 13,
      'iphone x': 14,
      'iphone xr': 15,
      'iphone xs': 16,
      'iphone xs max': 17,
      'iphone 11': 18,
      'iphone 11 pro': 19,
      'iphone 11 pro max': 20,
      'iphone se': 21,
      'iphone se 2': 22,
      'iphone se 3': 23,
      'iphone 12': 24,
      'iphone 12 mini': 25,
      'iphone 12 pro': 26,
      'iphone 12 pro max': 27,
      'iphone 13': 28,
      'iphone 13 mini': 29,
      'iphone 13 pro': 30,
      'iphone 13 pro max': 31,
      'iphone 14': 32,
      'iphone 14 plus': 33,
      'iphone 14 pro': 34,
      'iphone 14 pro max': 35,
      'iphone 15': 36,
      'iphone 15 plus': 37,
      'iphone 15 pro': 38,
      'iphone 15 pro max': 39,
      'iphone 16': 40,
      'iphone 16 plus': 41,
      'iphone 16 pro': 42,
      'iphone 16 pro max': 43,
      'iphone 17': 44,
      'iphone 17 air': 45,
      'iphone 17 pro': 46,
      'iphone 17 pro max': 47,
    };

    return [...categorias].sort((a, b) => {
      const nomeA = a.nome.toLowerCase().trim();
      const nomeB = b.nome.toLowerCase().trim();
      const ordemA = ordem[nomeA];
      const ordemB = ordem[nomeB];

      if (ordemA !== undefined && ordemB !== undefined) return ordemA - ordemB;
      if (ordemA !== undefined) return -1;
      if (ordemB !== undefined) return 1;
      return nomeA.localeCompare(nomeB, 'pt-BR');
    });
  }

  // ==================== Helper para extrair URL da imagem ====================
  function getImageUrl(imagens: any, size = 'medium', index = 0) {
    if (!imagens || imagens.length === 0) return '/placeholder.jpg';

    const image = imagens[index];
    if (!image) return '/placeholder.jpg';

    // Se for string JSON, fazer parse
    if (typeof image === 'string') {
      if (image.startsWith('{')) {
        try {
          const parsed = JSON.parse(image);
          return (
            parsed[size] ||
            parsed.medium ||
            parsed.thumbnail ||
            '/placeholder.jpg'
          );
        } catch {
          return image; // URL direta (formato antigo)
        }
      }
      return image; // URL direta (formato antigo)
    }

    // Formato objeto direto
    if (typeof image === 'object' && image !== null && 'thumbnail' in image) {
      return (
        image[size] || image.medium || image.thumbnail || '/placeholder.jpg'
      );
    }

    return '/placeholder.jpg';
  }

  // ==================== Templates para Produtos ====================
  const templatesLocal = {
    produtoCard(produto: any, modoVisualizacao?: string) {
      const modo = modoVisualizacao || getState().modoVisualizacao;
      const precoFormatado = utils.formatarPreco(produto.preco);
      const bateriaWidth = utils.calcularLarguraBateria(produto.bateria);
      const bateriaColorClass = getBateriaColor(produto.bateria);
      const imagemPrincipal = getImageUrl(produto.imagens, 'medium', 0);
      const temBateria = produto.bateria && produto.bateria > 0;

      const produtoEditData = JSON.stringify({
        id: produto.id,
        codigo: produto.codigo,
        nome: produto.nome,
        descricao: produto.descricao,
        preco: produto.preco,
        condicao: produto.condicao,
        bateria: produto.bateria,
        categoria_id: produto.categoria_id,
        imagens: produto.imagens || [],
      }).replace(/"/g, '&quot;');

      const badges = `
          ${!temBateria ? `<span class="condicao-badge ${produto.condicao.toLowerCase()}">${produto.condicao}</span>` : ''}
          ${
            temBateria
              ? `
            <div class="bateria-indicator ${bateriaColorClass}">
              <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="bateria-icon">
                <rect x="2" y="7" width="18" height="10" rx="2" stroke="currentColor" stroke-width="2"/>
                <path d="M20 10H22V14H20" stroke="currentColor" stroke-width="2"/>
                <rect x="4" y="9" width="${bateriaWidth}" height="6" rx="1" fill="currentColor" class="bateria-fill"/>
              </svg>
              <span>${produto.bateria}%</span>
            </div>`
              : ''
          }
        `;

      if (modo === 'lista') {
        return `
            <a href="/produto/${produto.id}" class="produto-card" data-produto-id="${produto.id}">
              <div class="produto-info">
                <div class="lista-left">
                  <h3>${utils.escapeHtml(produto.nome)}</h3>
                  <p class="descricao">${utils.escapeHtml(produto.descricao)}</p>
                  <div class="lista-codigo-badges">
                    ${produto.codigo ? `<span class="modal-codigo">Cod.: ${utils.escapeHtml(produto.codigo)}</span>` : ''}
                    ${badges}
                  </div>
                </div>
                <div class="lista-right">
                  <span class="preco">${precoFormatado}</span>
                </div>
              </div>
            </a>`;
      }

      return `
          <a href="/produto/${produto.id}" class="produto-card" data-produto-id="${produto.id}">
            <div class="produto-image">
              ${
                imagemPrincipal && imagemPrincipal !== '/placeholder.jpg'
                  ? `
                <img 
                  src="${imagemPrincipal}" 
                  alt="${utils.escapeHtml(produto.nome)}" 
                  loading="lazy" 
                  decoding="async"
                  fetchpriority="low"
                  width="600" 
                  height="600"
                  style="background: linear-gradient(135deg, #1a1a1a 0%, #2a2a2a 100%); object-fit: cover; aspect-ratio: 1;"
                />`
                  : `
                <div class="image-placeholder">
                  <svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21 16V8C21 6.89543 20.1046 6 19 6H5C3.89543 6 3 6.89543 3 8V16C3 17.1046 3.89543 18 5 18H19C20.1046 18 21 17.1046 21 16Z" stroke="currentColor" stroke-width="2"/>
                    <path d="M9 12L12 9L15 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                  </svg>
                </div>`
              }
              ${badges}
            </div>
            <div class="produto-info">
              <h3>${utils.escapeHtml(produto.nome)}</h3>
              <p class="descricao">${utils.escapeHtml(produto.descricao)}</p>
              <div class="produto-footer">
                <span class="preco">${precoFormatado}</span>
              </div>
            </div>
          </a>`;
    },

    categoriaSecao(
      nomeCategoria: string,
      produtos: any[],
      modoVisualizacao?: string,
    ) {
      const modo = modoVisualizacao || getState().modoVisualizacao;
      return `
          <div class="categoria-section">
            <h2 class="categoria-titulo">${utils.escapeHtml(nomeCategoria)}</h2>
            <div class="categoria-grid ${modo}">
              ${produtos.map((p: any) => templatesLocal.produtoCard(p, modo)).join('')}
            </div>
          </div>`;
    },
  };

  // ==================== Renderização ====================
  const render = {
    produtos() {
      console.log('🎨 Rendering products...');
      if (!elementos.produtosContainer || !elementos.emptyState) {
        console.error('❌ Containers not found!');
        return;
      }

      // ✅ Obter estado atualizado
      const currentState = getState();
      console.log('📊 Current state:', {
        produtos: currentState.produtos.length,
        categoria: currentState.categoriaAtiva,
        modo: currentState.modoVisualizacao,
      });

      elementos.produtosContainer.classList.remove('coluna', 'grade', 'lista');
      elementos.produtosContainer.classList.add(currentState.modoVisualizacao);
      document.querySelectorAll('.categoria-grid').forEach((grid) => {
        grid.classList.remove('coluna', 'grade', 'lista');
        grid.classList.add(currentState.modoVisualizacao);
      });

      let produtosFiltrados = filtrarProdutos(currentState);
      produtosFiltrados = ordenarProdutos(
        produtosFiltrados,
        currentState.filtros.ordenacao,
      );

      console.log('✅ Filtered/sorted:', produtosFiltrados.length, 'products');

      if (produtosFiltrados.length === 0) {
        elementos.produtosContainer.innerHTML = '';
        elementos.emptyState.style.display = 'block';
        return;
      }

      elementos.emptyState.style.display = 'none';

      if (currentState.categoriaAtiva === 'todos') {
        const grupos = agruparPorCategoria(produtosFiltrados);
        const categoriasComProdutos = Array.from(grupos.keys()).map(
          (nomeCategoria) => {
            const categoria = currentState.categorias.find(
              (c) => c.nome === nomeCategoria,
            );
            return {
              nome: nomeCategoria,
              categoria: categoria || {
                id: '',
                nome: nomeCategoria,
                created_at: '',
              },
            };
          },
        );

        const categoriasOrdenadas = ordenarCategorias(
          categoriasComProdutos.map((c) => c.categoria),
        );

        elementos.produtosContainer.innerHTML = categoriasOrdenadas
          .map((cat) => {
            const prods = grupos.get(cat.nome);
            return prods
              ? templatesLocal.categoriaSecao(
                  cat.nome,
                  prods,
                  currentState.modoVisualizacao,
                )
              : '';
          })
          .filter((html) => html !== '')
          .join('');
      } else {
        elementos.produtosContainer.innerHTML = produtosFiltrados
          .map((p) =>
            templatesLocal.produtoCard(p, currentState.modoVisualizacao),
          )
          .join('');
      }

      // ✅ Lazy loading de imagens
      imageLoader.observe(elementos.produtosContainer);
    },

    loading(mostrar: boolean) {
      if (elementos.loading) {
        elementos.loading.style.display = mostrar ? 'flex' : 'none';
      }
      if (elementos.produtosSkeleton) {
        elementos.produtosSkeleton.style.display = mostrar ? 'block' : 'none';
      }
    },
  };

  // ==================== API ====================
  const api = {
    async carregarDados(forceReload = false) {
      try {
        render.loading(true);

        const currentState = getState();
        console.log('📊 Current state before load:', {
          produtos: currentState.produtos.length,
          forceReload,
        });

        if (currentState.produtos.length > 0 && !forceReload) {
          console.log('✅ Using cached products, rendering...');
          render.produtos();
          render.loading(false);
          return;
        }

        console.log('🌐 Fetching from API...');
        const response = await fetch('/api/produtos?limit=30');
        const data = await response.json();

        if (data.error) throw new Error(data.error);

        console.log('📦 Received from API:', data.produtos?.length, 'products');

        updateState({
          produtos: data.produtos || [],
          nextCursor: data.nextCursor || null,
        });

        render.produtos();
      } catch (error) {
        console.error('❌ Erro ao carregar dados:', error);
        if (elementos.emptyState) elementos.emptyState.style.display = 'block';
      } finally {
        render.loading(false);
      }
    },

    async carregarMaisProdutos() {
      const currentState = getState();
      if (currentState.paginacao.carregando || !currentState.nextCursor) return;

      try {
        updateState({
          paginacao: { ...currentState.paginacao, carregando: true },
        });
        if (elementos.loadingMore) elementos.loadingMore.style.display = 'flex';

        const params = new URLSearchParams({
          cursor: currentState.nextCursor,
          limit: '30',
        });

        if (currentState.categoriaAtiva !== 'todos') {
          params.set('categoria', currentState.categoriaAtiva);
        }

        const response = await fetch(`/api/produtos?${params}`);
        const data = await response.json();

        if (data.error) throw new Error(data.error);

        const novosProdutos = [
          ...currentState.produtos,
          ...(data.produtos || []),
        ];
        updateState({
          produtos: novosProdutos,
          nextCursor: data.nextCursor,
        });

        render.produtos();
      } catch (error) {
        console.error('Erro ao carregar mais produtos:', error);
      } finally {
        const currentState = getState();
        updateState({
          paginacao: { ...currentState.paginacao, carregando: false },
        });
        if (elementos.loadingMore) elementos.loadingMore.style.display = 'none';
      }
    },
  };

  // ==================== Event Listeners ====================
  function setupEventListeners() {
    // ✅ Usar handlers modulares
    elementos.searchInput?.addEventListener('input', handlers.searchInput);
    elementos.toggleFiltros?.addEventListener('click', () =>
      handlers.toggleFiltros(elementos),
    );
    elementos.filtroCondicao?.addEventListener(
      'change',
      handlers.condicaoChange,
    );
    elementos.filtroBateria?.addEventListener('change', handlers.bateriaChange);
    elementos.filtroOrdenacao?.addEventListener(
      'change',
      handlers.ordenacaoChange,
    );
    elementos.btnLimparFiltros?.addEventListener('click', () =>
      handlers.limparFiltros(elementos),
    );

    // Categorias
    elementos.categoriaBtns.forEach((btn) => {
      btn.addEventListener('click', handlers.categoriaClick);
    });
    elementos.categoriaSelect?.addEventListener(
      'change',
      handlers.categoriaSelectChange,
    );

    // View mode
    elementos.viewModeBtns.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        handlers.viewModeChange(e);
      });
    });

    // Login
    elementos.formLogin?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const emailInput = document.getElementById(
        'login-email',
      ) as HTMLInputElement;
      const passwordInput = document.getElementById(
        'login-password',
      ) as HTMLInputElement;

      try {
        const data = await authService.signIn(
          emailInput.value,
          passwordInput.value,
        );
        elementos.modalLogin?.classList.remove('active');
        elementos.formLogin?.reset();
        if (elementos.loginError) {
          elementos.loginError.textContent = '';
          elementos.loginError.classList.remove('show');
        }
      } catch (error: any) {
        if (elementos.loginError) {
          elementos.loginError.textContent =
            error.message || 'Credenciais inválidas';
          elementos.loginError.classList.add('show');
        }
      }
    });

    elementos.modalLogin
      ?.querySelector('.modal-close')
      ?.addEventListener('click', () => {
        elementos.modalLogin?.classList.remove('active');
      });
    elementos.modalLogin
      ?.querySelector('.modal-overlay')
      ?.addEventListener('click', () => {
        elementos.modalLogin?.classList.remove('active');
      });

    // ✅ Sistema de eventos pub/sub
    onEvent(catalogEvents.FILTROS_CHANGED, () => {
      render.produtos();
    });

    onEvent(catalogEvents.CATEGORIA_CHANGED, () => {
      render.produtos();
    });

    onEvent(catalogEvents.VIEW_MODE_CHANGED, () => {
      const currentState = getState();
      localStorage.setItem('modoVisualizacao', currentState.modoVisualizacao);
      render.produtos();
    });

    window.addEventListener('produtos-updated', () => {
      api.carregarDados(true); // Force reload
    });

    // ✅ Intersection Observer para scroll infinito
    if (elementos.scrollSentinel) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const currentState = getState();
              if (
                !currentState.paginacao.carregando &&
                currentState.paginacao.hasMore
              ) {
                api.carregarMaisProdutos();
              }
            }
          });
        },
        { root: null, rootMargin: '100px', threshold: 0.1 },
      );
      observer.observe(elementos.scrollSentinel);
    }
  }

  // ==================== Funções Globais ====================
  // Nota: abrirModalLogin é definido no LoginDialog.astro

  // ==================== Inicialização ====================
  function init() {
    console.log('🚀 Initializing catalog...');
    const currentState = getState();
    console.log('📦 Initial state:', {
      produtos: currentState.produtos.length,
      categorias: currentState.categorias.length,
    });

    const savedView = localStorage.getItem('modoVisualizacao') as
      | 'coluna'
      | 'grade'
      | 'lista';
    const initialMode =
      savedView || (window.innerWidth < 768 ? 'coluna' : 'grade');

    updateState({
      modoVisualizacao: initialMode,
    });

    // Set active button based on initial mode
    document.querySelectorAll('[data-view]').forEach((btn) => {
      const btnElement = btn as HTMLElement;
      btnElement.classList.toggle(
        'active',
        btnElement.dataset.view === initialMode,
      );
    });

    setupEventListeners();

    console.log('📡 Loading data...');
    api.carregarDados();

    // ✅ Registrar tempo de inicialização
    metrics.recordMetric('PageInit', performance.now());
  }

  init();
</script>

<!-- Toast Notifications -->
<Toast />
